
ATmega32A_FirmWare.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a4  00800060  000014e8  0000157c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800104  00800104  00001620  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000167c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  000016b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002aac  00000000  00000000  00001870  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001011  00000000  00000000  0000431c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001225  00000000  00000000  0000532d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b8  00000000  00000000  00006554  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000bb0  00000000  00000000  00006a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001513  00000000  00000000  000075bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00008acf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 82 04 	jmp	0x904	; 0x904 <__vector_1>
       8:	0c 94 ab 04 	jmp	0x956	; 0x956 <__vector_2>
       c:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <__vector_10>
      2c:	0c 94 75 05 	jmp	0xaea	; 0xaea <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ee       	ldi	r30, 0xE8	; 232
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 30       	cpi	r26, 0x04	; 4
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a4 e0       	ldi	r26, 0x04	; 4
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 31       	cpi	r26, 0x1D	; 29
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <main>
      8a:	0c 94 72 0a 	jmp	0x14e4	; 0x14e4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <int0_Event>:
}


void int0_Event(void)
{
	GPIO_OutputHandle(GPIOC,PIN0,HIGH);
      92:	41 e0       	ldi	r20, 0x01	; 1
      94:	60 e0       	ldi	r22, 0x00	; 0
      96:	83 e3       	ldi	r24, 0x33	; 51
      98:	90 e0       	ldi	r25, 0x00	; 0
      9a:	0e 94 45 04 	call	0x88a	; 0x88a <GPIO_OutputHandle>
	GPIO_OutputHandle(GPIOC,PIN1,LOW);
      9e:	40 e0       	ldi	r20, 0x00	; 0
      a0:	61 e0       	ldi	r22, 0x01	; 1
      a2:	83 e3       	ldi	r24, 0x33	; 51
      a4:	90 e0       	ldi	r25, 0x00	; 0
      a6:	0e 94 45 04 	call	0x88a	; 0x88a <GPIO_OutputHandle>
      aa:	08 95       	ret

000000ac <ep>:
void ep(void)
{
		//vuint32_t ad = 0 , ad2 = 0 ;
		//LCD_Clear();
		//Save the  in EEPROM (In location from 1 to 10)
		eeprom_write(num,buffer);
      ac:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <buffer>
      b0:	70 91 0a 01 	lds	r23, 0x010A	; 0x80010a <buffer+0x1>
      b4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <buffer+0x2>
      b8:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <buffer+0x3>
      bc:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <num>
      c0:	82 2f       	mov	r24, r18
      c2:	90 e0       	ldi	r25, 0x00	; 0
      c4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <eeprom_write>
		//Save the  in EEPROM (In location from 1 to 10)
		eeprom_write(numm,buffer2);
      c8:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <buffer2>
      cc:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <buffer2+0x1>
      d0:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <buffer2+0x2>
      d4:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <buffer2+0x3>
      d8:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
      dc:	82 2f       	mov	r24, r18
      de:	90 e0       	ldi	r25, 0x00	; 0
      e0:	0e 94 cf 05 	call	0xb9e	; 0xb9e <eeprom_write>
		//LCD_DisplayString("eeprom = ");
		//LCD_DisplayInt(ad);
		//LCD_DisplayString(".");
		//LCD_DisplayInt(ad2);
		//counter++ ;
		num++;
      e4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <num>
      e8:	8f 5f       	subi	r24, 0xFF	; 255
      ea:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <num>
		numm++;
      ee:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
      f2:	8f 5f       	subi	r24, 0xFF	; 255
      f4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
      f8:	08 95       	ret

000000fa <adcr>:
		
    }
}

void adcr(void)
{
      fa:	4f 92       	push	r4
      fc:	5f 92       	push	r5
      fe:	6f 92       	push	r6
     100:	7f 92       	push	r7
     102:	8f 92       	push	r8
     104:	9f 92       	push	r9
     106:	af 92       	push	r10
     108:	bf 92       	push	r11
     10a:	cf 92       	push	r12
     10c:	df 92       	push	r13
     10e:	ef 92       	push	r14
     110:	ff 92       	push	r15
     112:	cf 93       	push	r28
     114:	df 93       	push	r29
     116:	1f 92       	push	r1
     118:	cd b7       	in	r28, 0x3d	; 61
     11a:	de b7       	in	r29, 0x3e	; 62
		
			float32 Voltage=0;
			vuint8_t counter = 1;
     11c:	81 e0       	ldi	r24, 0x01	; 1
     11e:	89 83       	std	Y+1, r24	; 0x01
			while (GPIO_InputHandle(GPIOD,PIN7) != LOW && num != 0x0B)
			{
			LCD_Clear();
			Voltage = ReadVolt(ADC0,Resolution_10Bit,3.0);
			buffer = Voltage ;
			buffer2 =  ((uint32_t)(100*Voltage))%100;
     120:	0f 2e       	mov	r0, r31
     122:	f4 e6       	ldi	r31, 0x64	; 100
     124:	8f 2e       	mov	r8, r31
     126:	91 2c       	mov	r9, r1
     128:	a1 2c       	mov	r10, r1
     12a:	b1 2c       	mov	r11, r1
     12c:	f0 2d       	mov	r31, r0
void adcr(void)
{
		
			float32 Voltage=0;
			vuint8_t counter = 1;
			while (GPIO_InputHandle(GPIOD,PIN7) != LOW && num != 0x0B)
     12e:	aa c0       	rjmp	.+340    	; 0x284 <adcr+0x18a>
			{
			LCD_Clear();
     130:	0e 94 9a 03 	call	0x734	; 0x734 <LCD_Clear>
			Voltage = ReadVolt(ADC0,Resolution_10Bit,3.0);
     134:	20 e0       	ldi	r18, 0x00	; 0
     136:	30 e0       	ldi	r19, 0x00	; 0
     138:	40 e4       	ldi	r20, 0x40	; 64
     13a:	50 e4       	ldi	r21, 0x40	; 64
     13c:	60 e0       	ldi	r22, 0x00	; 0
     13e:	80 e0       	ldi	r24, 0x00	; 0
     140:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <ReadVolt>
     144:	6b 01       	movw	r12, r22
     146:	7c 01       	movw	r14, r24
			buffer = Voltage ;
     148:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <__fixunssfsi>
     14c:	60 93 09 01 	sts	0x0109, r22	; 0x800109 <buffer>
     150:	70 93 0a 01 	sts	0x010A, r23	; 0x80010a <buffer+0x1>
     154:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <buffer+0x2>
     158:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <buffer+0x3>
			buffer2 =  ((uint32_t)(100*Voltage))%100;
     15c:	20 e0       	ldi	r18, 0x00	; 0
     15e:	30 e0       	ldi	r19, 0x00	; 0
     160:	48 ec       	ldi	r20, 0xC8	; 200
     162:	52 e4       	ldi	r21, 0x42	; 66
     164:	c7 01       	movw	r24, r14
     166:	b6 01       	movw	r22, r12
     168:	0e 94 d0 06 	call	0xda0	; 0xda0 <__mulsf3>
     16c:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <__fixunssfsi>
     170:	a5 01       	movw	r20, r10
     172:	94 01       	movw	r18, r8
     174:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__udivmodsi4>
     178:	2b 01       	movw	r4, r22
     17a:	3c 01       	movw	r6, r24
     17c:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <buffer2>
     180:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <buffer2+0x1>
     184:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <buffer2+0x2>
     188:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <buffer2+0x3>
			LCD_DisplayString("Volt = ");
     18c:	82 e6       	ldi	r24, 0x62	; 98
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_DisplayString>
			LCD_DisplayInt(Voltage);
     194:	c7 01       	movw	r24, r14
     196:	b6 01       	movw	r22, r12
     198:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__fixsfsi>
     19c:	0e 94 c1 03 	call	0x782	; 0x782 <LCD_DisplayInt>
			LCD_DisplayString(".");
     1a0:	8a e6       	ldi	r24, 0x6A	; 106
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_DisplayString>
			LCD_DisplayInt(((uint32_t)(100*Voltage))%100);
     1a8:	c3 01       	movw	r24, r6
     1aa:	b2 01       	movw	r22, r4
     1ac:	0e 94 c1 03 	call	0x782	; 0x782 <LCD_DisplayInt>
			LCD_DisplayString("V");
     1b0:	8c e6       	ldi	r24, 0x6C	; 108
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_DisplayString>
			if (ReadVolt(ADC0,Resolution_10Bit,3.0) >= 2.6)
     1b8:	20 e0       	ldi	r18, 0x00	; 0
     1ba:	30 e0       	ldi	r19, 0x00	; 0
     1bc:	40 e4       	ldi	r20, 0x40	; 64
     1be:	50 e4       	ldi	r21, 0x40	; 64
     1c0:	60 e0       	ldi	r22, 0x00	; 0
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <ReadVolt>
     1c8:	26 e6       	ldi	r18, 0x66	; 102
     1ca:	36 e6       	ldi	r19, 0x66	; 102
     1cc:	46 e2       	ldi	r20, 0x26	; 38
     1ce:	50 e4       	ldi	r21, 0x40	; 64
     1d0:	0e 94 cb 06 	call	0xd96	; 0xd96 <__gesf2>
     1d4:	88 23       	and	r24, r24
     1d6:	4c f0       	brlt	.+18     	; 0x1ea <adcr+0xf0>
			{
				GPIO_OutputHandle(GPIOD,PIN4,HIGH);
     1d8:	41 e0       	ldi	r20, 0x01	; 1
     1da:	64 e0       	ldi	r22, 0x04	; 4
     1dc:	80 e3       	ldi	r24, 0x30	; 48
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	0e 94 45 04 	call	0x88a	; 0x88a <GPIO_OutputHandle>
				test = 1 ;
     1e4:	81 e0       	ldi	r24, 0x01	; 1
     1e6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
			}	
			if (ReadVolt(ADC0,Resolution_10Bit,3.0) < 2.6)
     1ea:	20 e0       	ldi	r18, 0x00	; 0
     1ec:	30 e0       	ldi	r19, 0x00	; 0
     1ee:	40 e4       	ldi	r20, 0x40	; 64
     1f0:	50 e4       	ldi	r21, 0x40	; 64
     1f2:	60 e0       	ldi	r22, 0x00	; 0
     1f4:	80 e0       	ldi	r24, 0x00	; 0
     1f6:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <ReadVolt>
     1fa:	26 e6       	ldi	r18, 0x66	; 102
     1fc:	36 e6       	ldi	r19, 0x66	; 102
     1fe:	46 e2       	ldi	r20, 0x26	; 38
     200:	50 e4       	ldi	r21, 0x40	; 64
     202:	0e 94 de 05 	call	0xbbc	; 0xbbc <__cmpsf2>
     206:	88 23       	and	r24, r24
     208:	74 f4       	brge	.+28     	; 0x226 <adcr+0x12c>
			{
				GPIO_OutputHandle(GPIOC,PIN0,HIGH);
     20a:	41 e0       	ldi	r20, 0x01	; 1
     20c:	60 e0       	ldi	r22, 0x00	; 0
     20e:	83 e3       	ldi	r24, 0x33	; 51
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	0e 94 45 04 	call	0x88a	; 0x88a <GPIO_OutputHandle>
				GPIO_OutputHandle(GPIOC,PIN1,HIGH);
     216:	41 e0       	ldi	r20, 0x01	; 1
     218:	61 e0       	ldi	r22, 0x01	; 1
     21a:	83 e3       	ldi	r24, 0x33	; 51
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	0e 94 45 04 	call	0x88a	; 0x88a <GPIO_OutputHandle>
				test = 0;
     222:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     226:	2f ef       	ldi	r18, 0xFF	; 255
     228:	81 ee       	ldi	r24, 0xE1	; 225
     22a:	94 e0       	ldi	r25, 0x04	; 4
     22c:	21 50       	subi	r18, 0x01	; 1
     22e:	80 40       	sbci	r24, 0x00	; 0
     230:	90 40       	sbci	r25, 0x00	; 0
     232:	e1 f7       	brne	.-8      	; 0x22c <adcr+0x132>
     234:	00 c0       	rjmp	.+0      	; 0x236 <adcr+0x13c>
     236:	00 00       	nop
			}
			_delay_ms(100);
			ep();
     238:	0e 94 56 00 	call	0xac	; 0xac <ep>
			/*  */
			//volt3 = ((uint32_t)(1000*Voltage))%1000 ;
			//sprintf(buffer2, "%d ", volt3);
			//sprintf(buffer, "%d ", volt2);
			LCD_Select_RowCol(2,4);
     23c:	64 e0       	ldi	r22, 0x04	; 4
     23e:	82 e0       	ldi	r24, 0x02	; 2
     240:	0e 94 ad 03 	call	0x75a	; 0x75a <LCD_Select_RowCol>
			LCD_DisplayString("adc num");
     244:	8e e6       	ldi	r24, 0x6E	; 110
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_DisplayString>
			LCD_DisplayInt(counter);
     24c:	69 81       	ldd	r22, Y+1	; 0x01
     24e:	70 e0       	ldi	r23, 0x00	; 0
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	0e 94 c1 03 	call	0x782	; 0x782 <LCD_DisplayInt>
			LCD_Select_RowCol(3,0);
     258:	60 e0       	ldi	r22, 0x00	; 0
     25a:	83 e0       	ldi	r24, 0x03	; 3
     25c:	0e 94 ad 03 	call	0x75a	; 0x75a <LCD_Select_RowCol>
			LCD_DisplayString("press select <--");
     260:	86 e7       	ldi	r24, 0x76	; 118
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_DisplayString>
			counter ++ ;
     268:	89 81       	ldd	r24, Y+1	; 0x01
     26a:	8f 5f       	subi	r24, 0xFF	; 255
     26c:	89 83       	std	Y+1, r24	; 0x01
     26e:	2f ef       	ldi	r18, 0xFF	; 255
     270:	89 e6       	ldi	r24, 0x69	; 105
     272:	98 e1       	ldi	r25, 0x18	; 24
     274:	21 50       	subi	r18, 0x01	; 1
     276:	80 40       	sbci	r24, 0x00	; 0
     278:	90 40       	sbci	r25, 0x00	; 0
     27a:	e1 f7       	brne	.-8      	; 0x274 <adcr+0x17a>
     27c:	00 c0       	rjmp	.+0      	; 0x27e <adcr+0x184>
     27e:	00 00       	nop
			_delay_ms(500);
			LCD_Clear();
     280:	0e 94 9a 03 	call	0x734	; 0x734 <LCD_Clear>
void adcr(void)
{
		
			float32 Voltage=0;
			vuint8_t counter = 1;
			while (GPIO_InputHandle(GPIOD,PIN7) != LOW && num != 0x0B)
     284:	67 e0       	ldi	r22, 0x07	; 7
     286:	80 e3       	ldi	r24, 0x30	; 48
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	0e 94 65 04 	call	0x8ca	; 0x8ca <GPIO_InputHandle>
     28e:	88 23       	and	r24, r24
     290:	29 f0       	breq	.+10     	; 0x29c <adcr+0x1a2>
     292:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <num>
     296:	8b 30       	cpi	r24, 0x0B	; 11
     298:	09 f0       	breq	.+2      	; 0x29c <adcr+0x1a2>
     29a:	4a cf       	rjmp	.-364    	; 0x130 <adcr+0x36>
			LCD_DisplayString("press select <--");
			counter ++ ;
			_delay_ms(500);
			LCD_Clear();
			}
			num = 0x01;
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <num>
			numm = 0x0B;
     2a2:	8b e0       	ldi	r24, 0x0B	; 11
     2a4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			LCD_Clear();
     2a8:	0e 94 9a 03 	call	0x734	; 0x734 <LCD_Clear>
}
     2ac:	0f 90       	pop	r0
     2ae:	df 91       	pop	r29
     2b0:	cf 91       	pop	r28
     2b2:	ff 90       	pop	r15
     2b4:	ef 90       	pop	r14
     2b6:	df 90       	pop	r13
     2b8:	cf 90       	pop	r12
     2ba:	bf 90       	pop	r11
     2bc:	af 90       	pop	r10
     2be:	9f 90       	pop	r9
     2c0:	8f 90       	pop	r8
     2c2:	7f 90       	pop	r7
     2c4:	6f 90       	pop	r6
     2c6:	5f 90       	pop	r5
     2c8:	4f 90       	pop	r4
     2ca:	08 95       	ret

000002cc <hand>:
		//_delay_ms(500);
		//LCD_Clear();
}

void hand(void)
{
     2cc:	0f 93       	push	r16
     2ce:	1f 93       	push	r17
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
	uint8_t i = 0;
	int fg = 0;
	int fg2 = 0;
	GPIO_OutputHandle(GPIOC,PIN0,LOW);
     2d4:	40 e0       	ldi	r20, 0x00	; 0
     2d6:	60 e0       	ldi	r22, 0x00	; 0
     2d8:	83 e3       	ldi	r24, 0x33	; 51
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	0e 94 45 04 	call	0x88a	; 0x88a <GPIO_OutputHandle>
	GPIO_OutputHandle(GPIOC,PIN1,HIGH);
     2e0:	41 e0       	ldi	r20, 0x01	; 1
     2e2:	61 e0       	ldi	r22, 0x01	; 1
     2e4:	83 e3       	ldi	r24, 0x33	; 51
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	0e 94 45 04 	call	0x88a	; 0x88a <GPIO_OutputHandle>
	
	while (GPIO_InputHandle(GPIOD,PIN7) != LOW && i != 10 )
     2ec:	c0 e0       	ldi	r28, 0x00	; 0
     2ee:	d0 e0       	ldi	r29, 0x00	; 0
     2f0:	42 c0       	rjmp	.+132    	; 0x376 <hand+0xaa>
	{
	fg = eeprom_read(num+i);
     2f2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <num>
     2f6:	9e 01       	movw	r18, r28
     2f8:	28 0f       	add	r18, r24
     2fa:	31 1d       	adc	r19, r1
     2fc:	c9 01       	movw	r24, r18
     2fe:	0e 94 d7 05 	call	0xbae	; 0xbae <eeprom_read>
     302:	08 2f       	mov	r16, r24
	fg2= eeprom_read(numm+i);
     304:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     308:	9e 01       	movw	r18, r28
     30a:	28 0f       	add	r18, r24
     30c:	31 1d       	adc	r19, r1
     30e:	c9 01       	movw	r24, r18
     310:	0e 94 d7 05 	call	0xbae	; 0xbae <eeprom_read>
     314:	18 2f       	mov	r17, r24
	LCD_Select_RowCol(1,5);
     316:	65 e0       	ldi	r22, 0x05	; 5
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	0e 94 ad 03 	call	0x75a	; 0x75a <LCD_Select_RowCol>
	LCD_DisplayString("EEPROM");
     31e:	87 e8       	ldi	r24, 0x87	; 135
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_DisplayString>
	LCD_Select_RowCol(2,6);
     326:	66 e0       	ldi	r22, 0x06	; 6
     328:	82 e0       	ldi	r24, 0x02	; 2
     32a:	0e 94 ad 03 	call	0x75a	; 0x75a <LCD_Select_RowCol>
	LCD_DisplayInt(fg);
     32e:	60 2f       	mov	r22, r16
     330:	70 e0       	ldi	r23, 0x00	; 0
     332:	80 e0       	ldi	r24, 0x00	; 0
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	0e 94 c1 03 	call	0x782	; 0x782 <LCD_DisplayInt>
	LCD_DisplayString(".");
     33a:	8a e6       	ldi	r24, 0x6A	; 106
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_DisplayString>
	LCD_DisplayInt(fg2);
     342:	61 2f       	mov	r22, r17
     344:	70 e0       	ldi	r23, 0x00	; 0
     346:	80 e0       	ldi	r24, 0x00	; 0
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	0e 94 c1 03 	call	0x782	; 0x782 <LCD_DisplayInt>
	i++;
	LCD_Select_RowCol(3,0);
     34e:	60 e0       	ldi	r22, 0x00	; 0
     350:	83 e0       	ldi	r24, 0x03	; 3
     352:	0e 94 ad 03 	call	0x75a	; 0x75a <LCD_Select_RowCol>
	LCD_DisplayString("press select <--");
     356:	86 e7       	ldi	r24, 0x76	; 118
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_DisplayString>
     35e:	3f ef       	ldi	r19, 0xFF	; 255
     360:	89 e6       	ldi	r24, 0x69	; 105
     362:	98 e1       	ldi	r25, 0x18	; 24
     364:	31 50       	subi	r19, 0x01	; 1
     366:	80 40       	sbci	r24, 0x00	; 0
     368:	90 40       	sbci	r25, 0x00	; 0
     36a:	e1 f7       	brne	.-8      	; 0x364 <hand+0x98>
     36c:	00 c0       	rjmp	.+0      	; 0x36e <hand+0xa2>
     36e:	00 00       	nop
	_delay_ms(500);
	LCD_Clear();
     370:	0e 94 9a 03 	call	0x734	; 0x734 <LCD_Clear>
     374:	21 96       	adiw	r28, 0x01	; 1
	int fg = 0;
	int fg2 = 0;
	GPIO_OutputHandle(GPIOC,PIN0,LOW);
	GPIO_OutputHandle(GPIOC,PIN1,HIGH);
	
	while (GPIO_InputHandle(GPIOD,PIN7) != LOW && i != 10 )
     376:	67 e0       	ldi	r22, 0x07	; 7
     378:	80 e3       	ldi	r24, 0x30	; 48
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	0e 94 65 04 	call	0x8ca	; 0x8ca <GPIO_InputHandle>
     380:	88 23       	and	r24, r24
     382:	21 f0       	breq	.+8      	; 0x38c <hand+0xc0>
     384:	ca 30       	cpi	r28, 0x0A	; 10
     386:	d1 05       	cpc	r29, r1
     388:	09 f0       	breq	.+2      	; 0x38c <hand+0xc0>
     38a:	b3 cf       	rjmp	.-154    	; 0x2f2 <hand+0x26>
	LCD_Select_RowCol(3,0);
	LCD_DisplayString("press select <--");
	_delay_ms(500);
	LCD_Clear();
	}
	num = 0x01;
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <num>
	numm = 0x0B;
     392:	8b e0       	ldi	r24, 0x0B	; 11
     394:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
}
     398:	df 91       	pop	r29
     39a:	cf 91       	pop	r28
     39c:	1f 91       	pop	r17
     39e:	0f 91       	pop	r16
     3a0:	08 95       	ret

000003a2 <main>:
	void adcr(void);
	void hand(void);


int main(void)
{	
     3a2:	cf 93       	push	r28
     3a4:	df 93       	push	r29
     3a6:	1f 92       	push	r1
     3a8:	cd b7       	in	r28, 0x3d	; 61
     3aa:	de b7       	in	r29, 0x3e	; 62
	vuint8_t pinselect = 0;
     3ac:	19 82       	std	Y+1, r1	; 0x01
	LCD_init();
     3ae:	0e 94 44 03 	call	0x688	; 0x688 <LCD_init>
	ADC_Init(AREF_Refernce,ADC_Polling,ADC_SingleConv,ADC_Prescale_128);
     3b2:	27 e0       	ldi	r18, 0x07	; 7
     3b4:	40 e0       	ldi	r20, 0x00	; 0
     3b6:	60 e0       	ldi	r22, 0x00	; 0
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <ADC_Init>

	GPIO_DirectionSet(GPIOC,PIN0,OUTPUT);
     3be:	42 e0       	ldi	r20, 0x02	; 2
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	83 e3       	ldi	r24, 0x33	; 51
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	0e 94 fd 03 	call	0x7fa	; 0x7fa <GPIO_DirectionSet>
	GPIO_DirectionSet(GPIOC,PIN1,OUTPUT);
     3ca:	42 e0       	ldi	r20, 0x02	; 2
     3cc:	61 e0       	ldi	r22, 0x01	; 1
     3ce:	83 e3       	ldi	r24, 0x33	; 51
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	0e 94 fd 03 	call	0x7fa	; 0x7fa <GPIO_DirectionSet>
	
	GPIO_DirectionSet(GPIOD,PIN4,OUTPUT);
     3d6:	42 e0       	ldi	r20, 0x02	; 2
     3d8:	64 e0       	ldi	r22, 0x04	; 4
     3da:	80 e3       	ldi	r24, 0x30	; 48
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	0e 94 fd 03 	call	0x7fa	; 0x7fa <GPIO_DirectionSet>

	GPIO_DirectionSet(GPIOA,PIN6,OUTPUT);
     3e2:	42 e0       	ldi	r20, 0x02	; 2
     3e4:	66 e0       	ldi	r22, 0x06	; 6
     3e6:	89 e3       	ldi	r24, 0x39	; 57
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	0e 94 fd 03 	call	0x7fa	; 0x7fa <GPIO_DirectionSet>
	GPIO_DirectionSet(GPIOA,PIN7,OUTPUT);
     3ee:	42 e0       	ldi	r20, 0x02	; 2
     3f0:	67 e0       	ldi	r22, 0x07	; 7
     3f2:	89 e3       	ldi	r24, 0x39	; 57
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	0e 94 fd 03 	call	0x7fa	; 0x7fa <GPIO_DirectionSet>

	Ext_InterruptEnable(Interrupt0,BothEdges);
     3fa:	62 e0       	ldi	r22, 0x02	; 2
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	0e 94 06 05 	call	0xa0c	; 0xa0c <Ext_InterruptEnable>
	ISR0_ptr=int0_Event;
     402:	89 e4       	ldi	r24, 0x49	; 73
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <ISR0_ptr+0x1>
     40a:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <ISR0_ptr>
	
	GLOBAL_INETERRUPT_ENABLE();
     40e:	8f b7       	in	r24, 0x3f	; 63
     410:	80 68       	ori	r24, 0x80	; 128
     412:	8f bf       	out	0x3f, r24	; 63

	while(1)
    {	
			 num = 0x01 ;
     414:	11 e0       	ldi	r17, 0x01	; 1
			 numm = 0x0B ;
     416:	0b e0       	ldi	r16, 0x0B	; 11
	
	GLOBAL_INETERRUPT_ENABLE();

	while(1)
    {	
			 num = 0x01 ;
     418:	10 93 61 00 	sts	0x0061, r17	; 0x800061 <num>
			 numm = 0x0B ;
     41c:	00 93 60 00 	sts	0x0060, r16	; 0x800060 <__DATA_REGION_ORIGIN__>
			 pinselect = 0;
     420:	19 82       	std	Y+1, r1	; 0x01
			if (test == 1 )
     422:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
     426:	81 30       	cpi	r24, 0x01	; 1
     428:	69 f4       	brne	.+26     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
			{	
				GPIO_OutputHandle(GPIOC,PIN0,HIGH);
     42a:	41 2f       	mov	r20, r17
     42c:	60 e0       	ldi	r22, 0x00	; 0
     42e:	83 e3       	ldi	r24, 0x33	; 51
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	0e 94 45 04 	call	0x88a	; 0x88a <GPIO_OutputHandle>
				GPIO_OutputHandle(GPIOC,PIN1,LOW);
     436:	40 e0       	ldi	r20, 0x00	; 0
     438:	61 2f       	mov	r22, r17
     43a:	83 e3       	ldi	r24, 0x33	; 51
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	0e 94 45 04 	call	0x88a	; 0x88a <GPIO_OutputHandle>
     442:	0c c0       	rjmp	.+24     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
			}
			else
			{
			GPIO_OutputHandle(GPIOC,PIN0,LOW);
     444:	40 e0       	ldi	r20, 0x00	; 0
     446:	60 e0       	ldi	r22, 0x00	; 0
     448:	83 e3       	ldi	r24, 0x33	; 51
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	0e 94 45 04 	call	0x88a	; 0x88a <GPIO_OutputHandle>
			GPIO_OutputHandle(GPIOC,PIN1,LOW);
     450:	40 e0       	ldi	r20, 0x00	; 0
     452:	61 2f       	mov	r22, r17
     454:	83 e3       	ldi	r24, 0x33	; 51
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	0e 94 45 04 	call	0x88a	; 0x88a <GPIO_OutputHandle>
			}
			GPIO_OutputHandle(GPIOA,PIN6,LOW);
     45c:	40 e0       	ldi	r20, 0x00	; 0
     45e:	66 e0       	ldi	r22, 0x06	; 6
     460:	89 e3       	ldi	r24, 0x39	; 57
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	0e 94 45 04 	call	0x88a	; 0x88a <GPIO_OutputHandle>
			GPIO_OutputHandle(GPIOA,PIN7,HIGH);
     468:	41 2f       	mov	r20, r17
     46a:	67 e0       	ldi	r22, 0x07	; 7
     46c:	89 e3       	ldi	r24, 0x39	; 57
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	0e 94 45 04 	call	0x88a	; 0x88a <GPIO_OutputHandle>

			LCD_Select_RowCol(0,0);
     474:	60 e0       	ldi	r22, 0x00	; 0
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	0e 94 ad 03 	call	0x75a	; 0x75a <LCD_Select_RowCol>
			LCD_DisplayString(" 1 --> meager");
     47c:	8e e8       	ldi	r24, 0x8E	; 142
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_DisplayString>
			LCD_Select_RowCol(1,0);
     484:	60 e0       	ldi	r22, 0x00	; 0
     486:	81 2f       	mov	r24, r17
     488:	0e 94 ad 03 	call	0x75a	; 0x75a <LCD_Select_RowCol>
			LCD_DisplayString(" 2 --> hist");
     48c:	8c e9       	ldi	r24, 0x9C	; 156
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_DisplayString>
     494:	2f ef       	ldi	r18, 0xFF	; 255
     496:	83 ec       	ldi	r24, 0xC3	; 195
     498:	99 e0       	ldi	r25, 0x09	; 9
     49a:	21 50       	subi	r18, 0x01	; 1
     49c:	80 40       	sbci	r24, 0x00	; 0
     49e:	90 40       	sbci	r25, 0x00	; 0
     4a0:	e1 f7       	brne	.-8      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
     4a2:	00 c0       	rjmp	.+0      	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
     4a4:	00 00       	nop
     4a6:	2d c0       	rjmp	.+90     	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
			_delay_ms(200);
			while(GPIO_InputHandle(GPIOD,PIN7) == HIGH)
			{
			LCD_Select_RowCol(2,0);
     4a8:	60 e0       	ldi	r22, 0x00	; 0
     4aa:	82 e0       	ldi	r24, 0x02	; 2
     4ac:	0e 94 ad 03 	call	0x75a	; 0x75a <LCD_Select_RowCol>
			LCD_DisplayString("count");
     4b0:	88 ea       	ldi	r24, 0xA8	; 168
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_DisplayString>
			LCD_Select_RowCol(3,0);
     4b8:	60 e0       	ldi	r22, 0x00	; 0
     4ba:	83 e0       	ldi	r24, 0x03	; 3
     4bc:	0e 94 ad 03 	call	0x75a	; 0x75a <LCD_Select_RowCol>
			LCD_DisplayString("Select");
     4c0:	8e ea       	ldi	r24, 0xAE	; 174
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_DisplayString>
			
			if (GPIO_InputHandle(GPIOD,PIN5) != HIGH)
     4c8:	65 e0       	ldi	r22, 0x05	; 5
     4ca:	80 e3       	ldi	r24, 0x30	; 48
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	0e 94 65 04 	call	0x8ca	; 0x8ca <GPIO_InputHandle>
     4d2:	81 30       	cpi	r24, 0x01	; 1
     4d4:	b1 f0       	breq	.+44     	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
			{
			pinselect++;
     4d6:	89 81       	ldd	r24, Y+1	; 0x01
     4d8:	8f 5f       	subi	r24, 0xFF	; 255
     4da:	89 83       	std	Y+1, r24	; 0x01
			LCD_Select_RowCol(2,14);
     4dc:	6e e0       	ldi	r22, 0x0E	; 14
     4de:	82 e0       	ldi	r24, 0x02	; 2
     4e0:	0e 94 ad 03 	call	0x75a	; 0x75a <LCD_Select_RowCol>
			LCD_DisplayInt(pinselect);
     4e4:	69 81       	ldd	r22, Y+1	; 0x01
     4e6:	70 e0       	ldi	r23, 0x00	; 0
     4e8:	80 e0       	ldi	r24, 0x00	; 0
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	0e 94 c1 03 	call	0x782	; 0x782 <LCD_DisplayInt>
     4f0:	2f ef       	ldi	r18, 0xFF	; 255
     4f2:	83 ec       	ldi	r24, 0xC3	; 195
     4f4:	99 e0       	ldi	r25, 0x09	; 9
     4f6:	21 50       	subi	r18, 0x01	; 1
     4f8:	80 40       	sbci	r24, 0x00	; 0
     4fa:	90 40       	sbci	r25, 0x00	; 0
     4fc:	e1 f7       	brne	.-8      	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
     4fe:	00 c0       	rjmp	.+0      	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
     500:	00 00       	nop
			LCD_Select_RowCol(0,0);
			LCD_DisplayString(" 1 --> meager");
			LCD_Select_RowCol(1,0);
			LCD_DisplayString(" 2 --> hist");
			_delay_ms(200);
			while(GPIO_InputHandle(GPIOD,PIN7) == HIGH)
     502:	67 e0       	ldi	r22, 0x07	; 7
     504:	80 e3       	ldi	r24, 0x30	; 48
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	0e 94 65 04 	call	0x8ca	; 0x8ca <GPIO_InputHandle>
     50c:	81 30       	cpi	r24, 0x01	; 1
     50e:	61 f2       	breq	.-104    	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
			_delay_ms(200);
			}
			
			}

			LCD_Clear();
     510:	0e 94 9a 03 	call	0x734	; 0x734 <LCD_Clear>
			

			if (pinselect == 1)
     514:	89 81       	ldd	r24, Y+1	; 0x01
     516:	81 30       	cpi	r24, 0x01	; 1
     518:	99 f4       	brne	.+38     	; 0x540 <__EEPROM_REGION_LENGTH__+0x140>
			{
			LCD_Select_RowCol(1,5);
     51a:	65 e0       	ldi	r22, 0x05	; 5
     51c:	81 2f       	mov	r24, r17
     51e:	0e 94 ad 03 	call	0x75a	; 0x75a <LCD_Select_RowCol>
			LCD_DisplayString("mager");
     522:	85 eb       	ldi	r24, 0xB5	; 181
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_DisplayString>
     52a:	2f ef       	ldi	r18, 0xFF	; 255
     52c:	89 e6       	ldi	r24, 0x69	; 105
     52e:	98 e1       	ldi	r25, 0x18	; 24
     530:	21 50       	subi	r18, 0x01	; 1
     532:	80 40       	sbci	r24, 0x00	; 0
     534:	90 40       	sbci	r25, 0x00	; 0
     536:	e1 f7       	brne	.-8      	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
     538:	00 c0       	rjmp	.+0      	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
     53a:	00 00       	nop
			_delay_ms(500);
			adcr();
     53c:	0e 94 7d 00 	call	0xfa	; 0xfa <adcr>
			}
			
			if (pinselect == 2)
     540:	89 81       	ldd	r24, Y+1	; 0x01
     542:	82 30       	cpi	r24, 0x02	; 2
     544:	a9 f4       	brne	.+42     	; 0x570 <__EEPROM_REGION_LENGTH__+0x170>
			{
			//ep();
			LCD_Select_RowCol(1,5);
     546:	65 e0       	ldi	r22, 0x05	; 5
     548:	81 2f       	mov	r24, r17
     54a:	0e 94 ad 03 	call	0x75a	; 0x75a <LCD_Select_RowCol>
			LCD_DisplayString("eeprom");
     54e:	8b eb       	ldi	r24, 0xBB	; 187
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_DisplayString>
     556:	2f ef       	ldi	r18, 0xFF	; 255
     558:	89 e6       	ldi	r24, 0x69	; 105
     55a:	98 e1       	ldi	r25, 0x18	; 24
     55c:	21 50       	subi	r18, 0x01	; 1
     55e:	80 40       	sbci	r24, 0x00	; 0
     560:	90 40       	sbci	r25, 0x00	; 0
     562:	e1 f7       	brne	.-8      	; 0x55c <__EEPROM_REGION_LENGTH__+0x15c>
     564:	00 c0       	rjmp	.+0      	; 0x566 <__EEPROM_REGION_LENGTH__+0x166>
     566:	00 00       	nop
			_delay_ms(500);
			LCD_Clear();
     568:	0e 94 9a 03 	call	0x734	; 0x734 <LCD_Clear>
			hand();
     56c:	0e 94 66 01 	call	0x2cc	; 0x2cc <hand>
			}
		if (pinselect > 2)
     570:	89 81       	ldd	r24, Y+1	; 0x01
     572:	83 30       	cpi	r24, 0x03	; 3
     574:	98 f0       	brcs	.+38     	; 0x59c <__EEPROM_REGION_LENGTH__+0x19c>
		{
		LCD_Select_RowCol(1,2);
     576:	62 e0       	ldi	r22, 0x02	; 2
     578:	81 2f       	mov	r24, r17
     57a:	0e 94 ad 03 	call	0x75a	; 0x75a <LCD_Select_RowCol>
		LCD_DisplayString("stop");
     57e:	82 ec       	ldi	r24, 0xC2	; 194
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_DisplayString>
		LCD_Clear();
     586:	0e 94 9a 03 	call	0x734	; 0x734 <LCD_Clear>
     58a:	2f ef       	ldi	r18, 0xFF	; 255
     58c:	89 e6       	ldi	r24, 0x69	; 105
     58e:	98 e1       	ldi	r25, 0x18	; 24
     590:	21 50       	subi	r18, 0x01	; 1
     592:	80 40       	sbci	r24, 0x00	; 0
     594:	90 40       	sbci	r25, 0x00	; 0
     596:	e1 f7       	brne	.-8      	; 0x590 <__EEPROM_REGION_LENGTH__+0x190>
     598:	00 c0       	rjmp	.+0      	; 0x59a <__EEPROM_REGION_LENGTH__+0x19a>
     59a:	00 00       	nop
		_delay_ms(500);
		}
		if (pinselect < 0)
     59c:	89 81       	ldd	r24, Y+1	; 0x01
				LCD_Clear();
				_delay_ms(500);
		}
			
		
    }
     59e:	3c cf       	rjmp	.-392    	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>

000005a0 <ReadVolt>:


#include <AvoMeter_Max5v.h>

float32 ReadVolt(ADC_Chanel Ch , ADC_Resolution Res, float32 VoltRef)
{
     5a0:	cf 92       	push	r12
     5a2:	df 92       	push	r13
     5a4:	ef 92       	push	r14
     5a6:	ff 92       	push	r15
     5a8:	69 01       	movw	r12, r18
     5aa:	7a 01       	movw	r14, r20
	if ( Res == Resolution_8Bit)
     5ac:	60 32       	cpi	r22, 0x20	; 32
     5ae:	91 f4       	brne	.+36     	; 0x5d4 <ReadVolt+0x34>
	{
		return (ADC_Read_Polling(Ch,Resolution_8Bit) * VoltRef) / 256.0;
     5b0:	0e 94 e6 03 	call	0x7cc	; 0x7cc <ADC_Read_Polling>
     5b4:	bc 01       	movw	r22, r24
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	0e 94 19 06 	call	0xc32	; 0xc32 <__floatunsisf>
     5be:	a7 01       	movw	r20, r14
     5c0:	96 01       	movw	r18, r12
     5c2:	0e 94 d0 06 	call	0xda0	; 0xda0 <__mulsf3>
     5c6:	20 e0       	ldi	r18, 0x00	; 0
     5c8:	30 e0       	ldi	r19, 0x00	; 0
     5ca:	40 e8       	ldi	r20, 0x80	; 128
     5cc:	5b e3       	ldi	r21, 0x3B	; 59
     5ce:	0e 94 d0 06 	call	0xda0	; 0xda0 <__mulsf3>
     5d2:	12 c0       	rjmp	.+36     	; 0x5f8 <ReadVolt+0x58>
	}
	else
	{
		return (ADC_Read_Polling(Ch,Resolution_10Bit) * VoltRef) / 1024.0;
     5d4:	60 e0       	ldi	r22, 0x00	; 0
     5d6:	0e 94 e6 03 	call	0x7cc	; 0x7cc <ADC_Read_Polling>
     5da:	bc 01       	movw	r22, r24
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	0e 94 19 06 	call	0xc32	; 0xc32 <__floatunsisf>
     5e4:	a7 01       	movw	r20, r14
     5e6:	96 01       	movw	r18, r12
     5e8:	0e 94 d0 06 	call	0xda0	; 0xda0 <__mulsf3>
     5ec:	20 e0       	ldi	r18, 0x00	; 0
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	40 e8       	ldi	r20, 0x80	; 128
     5f2:	5a e3       	ldi	r21, 0x3A	; 58
     5f4:	0e 94 d0 06 	call	0xda0	; 0xda0 <__mulsf3>
	}
     5f8:	ff 90       	pop	r15
     5fa:	ef 90       	pop	r14
     5fc:	df 90       	pop	r13
     5fe:	cf 90       	pop	r12
     600:	08 95       	ret

00000602 <Send_instruction>:
	}
	
	void Send_instruction(uint8_t instruction)
	{
		/* RW, RS Should be 0 when Writing instructions to LCD */
		CLEARBIT(LCD_Control_reg_OP,RS);
     602:	c0 98       	cbi	0x18, 0	; 24
		CLEARBIT(LCD_Control_reg_OP,RW);
     604:	c1 98       	cbi	0x18, 1	; 24
     606:	ef e9       	ldi	r30, 0x9F	; 159
     608:	ff e0       	ldi	r31, 0x0F	; 15
     60a:	31 97       	sbiw	r30, 0x01	; 1
     60c:	f1 f7       	brne	.-4      	; 0x60a <Send_instruction+0x8>
     60e:	00 c0       	rjmp	.+0      	; 0x610 <Send_instruction+0xe>
     610:	00 00       	nop
		/* Delay of Address Set 60ns minimum */
		_delay_ms(1);
		
		/* Enable LCD E=1 */
		SETBIT(LCD_Control_reg_OP,E);
     612:	c2 9a       	sbi	0x18, 2	; 24
     614:	ef e9       	ldi	r30, 0x9F	; 159
     616:	ff e0       	ldi	r31, 0x0F	; 15
     618:	31 97       	sbiw	r30, 0x01	; 1
     61a:	f1 f7       	brne	.-4      	; 0x618 <Send_instruction+0x16>
     61c:	00 c0       	rjmp	.+0      	; 0x61e <Send_instruction+0x1c>
     61e:	00 00       	nop
			_delay_ms(1); 
		#else 
			
			#if Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_Reg_OP &=0x0F;
     620:	98 b3       	in	r25, 0x18	; 24
     622:	9f 70       	andi	r25, 0x0F	; 15
     624:	98 bb       	out	0x18, r25	; 24
				LCD_Data_Reg_OP |= (instruction & 0xF0);
     626:	98 b3       	in	r25, 0x18	; 24
     628:	28 2f       	mov	r18, r24
     62a:	20 7f       	andi	r18, 0xF0	; 240
     62c:	92 2b       	or	r25, r18
     62e:	98 bb       	out	0x18, r25	; 24
     630:	ef e9       	ldi	r30, 0x9F	; 159
     632:	ff e0       	ldi	r31, 0x0F	; 15
     634:	31 97       	sbiw	r30, 0x01	; 1
     636:	f1 f7       	brne	.-4      	; 0x634 <Send_instruction+0x32>
     638:	00 c0       	rjmp	.+0      	; 0x63a <Send_instruction+0x38>
     63a:	00 00       	nop
			#endif
			/* Data set-up time delay  Tdsw = 195 ns */
			_delay_ms(1);
		
			/* disable LCD E=0 */
			CLEARBIT(LCD_Control_reg_OP,E);
     63c:	c2 98       	cbi	0x18, 2	; 24
     63e:	ef e9       	ldi	r30, 0x9F	; 159
     640:	ff e0       	ldi	r31, 0x0F	; 15
     642:	31 97       	sbiw	r30, 0x01	; 1
     644:	f1 f7       	brne	.-4      	; 0x642 <Send_instruction+0x40>
     646:	00 c0       	rjmp	.+0      	; 0x648 <Send_instruction+0x46>
     648:	00 00       	nop
			/* Data Hold delay Th = 10ns */
			_delay_ms(1);
			
			/* Enable LCD E=1 */
			SETBIT(LCD_Control_reg_OP,E);
     64a:	c2 9a       	sbi	0x18, 2	; 24
     64c:	ef e9       	ldi	r30, 0x9F	; 159
     64e:	ff e0       	ldi	r31, 0x0F	; 15
     650:	31 97       	sbiw	r30, 0x01	; 1
     652:	f1 f7       	brne	.-4      	; 0x650 <Send_instruction+0x4e>
     654:	00 c0       	rjmp	.+0      	; 0x656 <Send_instruction+0x54>
     656:	00 00       	nop
			/* delay for processing PW min 450ns */
			_delay_ms(1);
			#if Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_Reg_OP &=0x0F;
     658:	98 b3       	in	r25, 0x18	; 24
     65a:	9f 70       	andi	r25, 0x0F	; 15
     65c:	98 bb       	out	0x18, r25	; 24
				LCD_Data_Reg_OP |= ((instruction <<4) );
     65e:	28 b3       	in	r18, 0x18	; 24
     660:	f0 e1       	ldi	r31, 0x10	; 16
     662:	8f 9f       	mul	r24, r31
     664:	c0 01       	movw	r24, r0
     666:	11 24       	eor	r1, r1
     668:	82 2b       	or	r24, r18
     66a:	88 bb       	out	0x18, r24	; 24
     66c:	8f e9       	ldi	r24, 0x9F	; 159
     66e:	9f e0       	ldi	r25, 0x0F	; 15
     670:	01 97       	sbiw	r24, 0x01	; 1
     672:	f1 f7       	brne	.-4      	; 0x670 <Send_instruction+0x6e>
     674:	00 c0       	rjmp	.+0      	; 0x676 <Send_instruction+0x74>
     676:	00 00       	nop
				LCD_Data_Reg_OP |= ((instruction) & 0x0f);
			#endif
				/* Data set-up time delay  Tdsw = 195 ns */
				_delay_ms(1);
				/* disable LCD E=0 */
				CLEARBIT(LCD_Control_reg_OP,E);
     678:	c2 98       	cbi	0x18, 2	; 24
     67a:	ef e9       	ldi	r30, 0x9F	; 159
     67c:	ff e0       	ldi	r31, 0x0F	; 15
     67e:	31 97       	sbiw	r30, 0x01	; 1
     680:	f1 f7       	brne	.-4      	; 0x67e <Send_instruction+0x7c>
     682:	00 c0       	rjmp	.+0      	; 0x684 <Send_instruction+0x82>
     684:	00 00       	nop
     686:	08 95       	ret

00000688 <LCD_init>:
	#include "LCD.h"
	#include <stdlib.h>
	void LCD_init(void)
	{
		/* Set The Control Pins Direction to OUtput */
		LCD_Control_reg_DIR |=(1<<E) | (1<<RW) | (1<<RS);
     688:	87 b3       	in	r24, 0x17	; 23
     68a:	87 60       	ori	r24, 0x07	; 7
     68c:	87 bb       	out	0x17, r24	; 23
			LCD_Data_Reg_DIR =0xFF;
		#else
			
			#if Upper_Data_port
				/* Set The Direction of The Upper Pins to OP*/
				LCD_Data_Reg_DIR |=(0xF0);
     68e:	87 b3       	in	r24, 0x17	; 23
     690:	80 6f       	ori	r24, 0xF0	; 240
     692:	87 bb       	out	0x17, r24	; 23
			#else
				/* Set The Direction of The LOWER Pins to OP*/
				LCD_Data_Reg_DIR|=(0x0F);
			#endif
			Send_instruction(Return_Home);
     694:	82 e0       	ldi	r24, 0x02	; 2
     696:	0e 94 01 03 	call	0x602	; 0x602 <Send_instruction>
		#endif
		
		Send_instruction(Data_Set);
     69a:	88 e2       	ldi	r24, 0x28	; 40
     69c:	0e 94 01 03 	call	0x602	; 0x602 <Send_instruction>
		Send_instruction(Display_on);
     6a0:	8f e0       	ldi	r24, 0x0F	; 15
     6a2:	0e 94 01 03 	call	0x602	; 0x602 <Send_instruction>
		Send_instruction(Clear_display);
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	0e 94 01 03 	call	0x602	; 0x602 <Send_instruction>
     6ac:	08 95       	ret

000006ae <LCD_DisplayChar>:
	
	
	void LCD_DisplayChar(uint8_t Data)
	{
		/* RW  Should be 0  and RS should be 1 when Writing Data to LCD */
		SETBIT(LCD_Control_reg_OP,RS);
     6ae:	c0 9a       	sbi	0x18, 0	; 24
		CLEARBIT(LCD_Control_reg_OP,RW);
     6b0:	c1 98       	cbi	0x18, 1	; 24
     6b2:	ef e9       	ldi	r30, 0x9F	; 159
     6b4:	ff e0       	ldi	r31, 0x0F	; 15
     6b6:	31 97       	sbiw	r30, 0x01	; 1
     6b8:	f1 f7       	brne	.-4      	; 0x6b6 <LCD_DisplayChar+0x8>
     6ba:	00 c0       	rjmp	.+0      	; 0x6bc <LCD_DisplayChar+0xe>
     6bc:	00 00       	nop
		/* Delay of Address Set 60ns minimum */
		_delay_ms(1);
		/* Enable LCD E=1 */
		SETBIT(LCD_Control_reg_OP,E);
     6be:	c2 9a       	sbi	0x18, 2	; 24
     6c0:	ef e9       	ldi	r30, 0x9F	; 159
     6c2:	ff e0       	ldi	r31, 0x0F	; 15
     6c4:	31 97       	sbiw	r30, 0x01	; 1
     6c6:	f1 f7       	brne	.-4      	; 0x6c4 <LCD_DisplayChar+0x16>
     6c8:	00 c0       	rjmp	.+0      	; 0x6ca <LCD_DisplayChar+0x1c>
     6ca:	00 00       	nop
		#if eight_bitdata
			LCD_Data_Reg_OP=Data;
		#else
			#if Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_Reg_OP &=0x0F;
     6cc:	98 b3       	in	r25, 0x18	; 24
     6ce:	9f 70       	andi	r25, 0x0F	; 15
     6d0:	98 bb       	out	0x18, r25	; 24
				/* Send MSB (4-bits )*/
				LCD_Data_Reg_OP |= (Data & 0xF0);
     6d2:	98 b3       	in	r25, 0x18	; 24
     6d4:	28 2f       	mov	r18, r24
     6d6:	20 7f       	andi	r18, 0xF0	; 240
     6d8:	92 2b       	or	r25, r18
     6da:	98 bb       	out	0x18, r25	; 24
     6dc:	ef e9       	ldi	r30, 0x9F	; 159
     6de:	ff e0       	ldi	r31, 0x0F	; 15
     6e0:	31 97       	sbiw	r30, 0x01	; 1
     6e2:	f1 f7       	brne	.-4      	; 0x6e0 <LCD_DisplayChar+0x32>
     6e4:	00 c0       	rjmp	.+0      	; 0x6e6 <LCD_DisplayChar+0x38>
     6e6:	00 00       	nop
			#endif
				
			/* Data set-up time delay  Tdsw = 195 ns */
			_delay_ms(1);
			/* disable LCD E=0 */
			CLEARBIT(LCD_Control_reg_OP,E);
     6e8:	c2 98       	cbi	0x18, 2	; 24
     6ea:	ef e9       	ldi	r30, 0x9F	; 159
     6ec:	ff e0       	ldi	r31, 0x0F	; 15
     6ee:	31 97       	sbiw	r30, 0x01	; 1
     6f0:	f1 f7       	brne	.-4      	; 0x6ee <LCD_DisplayChar+0x40>
     6f2:	00 c0       	rjmp	.+0      	; 0x6f4 <LCD_DisplayChar+0x46>
     6f4:	00 00       	nop
			/* Data Hold delay Th = 10ns */
			_delay_ms(1);
			/* Enable LCD E=1 */
			SETBIT(LCD_Control_reg_OP,E); 
     6f6:	c2 9a       	sbi	0x18, 2	; 24
				
			#if Upper_Data_port
				/* clear the Prev Data */
				LCD_Data_Reg_OP &=0x0F;
     6f8:	98 b3       	in	r25, 0x18	; 24
     6fa:	9f 70       	andi	r25, 0x0F	; 15
     6fc:	98 bb       	out	0x18, r25	; 24
				LCD_Data_Reg_OP |= ((Data <<4) & 0xF0);
     6fe:	28 b3       	in	r18, 0x18	; 24
     700:	f0 e1       	ldi	r31, 0x10	; 16
     702:	8f 9f       	mul	r24, r31
     704:	c0 01       	movw	r24, r0
     706:	11 24       	eor	r1, r1
     708:	82 2b       	or	r24, r18
     70a:	88 bb       	out	0x18, r24	; 24
     70c:	8f e9       	ldi	r24, 0x9F	; 159
     70e:	9f e0       	ldi	r25, 0x0F	; 15
     710:	01 97       	sbiw	r24, 0x01	; 1
     712:	f1 f7       	brne	.-4      	; 0x710 <LCD_DisplayChar+0x62>
     714:	00 c0       	rjmp	.+0      	; 0x716 <LCD_DisplayChar+0x68>
     716:	00 00       	nop
     718:	ef e9       	ldi	r30, 0x9F	; 159
     71a:	ff e0       	ldi	r31, 0x0F	; 15
     71c:	31 97       	sbiw	r30, 0x01	; 1
     71e:	f1 f7       	brne	.-4      	; 0x71c <LCD_DisplayChar+0x6e>
     720:	00 c0       	rjmp	.+0      	; 0x722 <LCD_DisplayChar+0x74>
     722:	00 00       	nop
			
			#endif
		/* Data set-up time delay  Tdsw = 195 ns */
		_delay_ms(1);
		/* disable LCD E=0 */
		CLEARBIT(LCD_Control_reg_OP,E);						
     724:	c2 98       	cbi	0x18, 2	; 24
     726:	8f e9       	ldi	r24, 0x9F	; 159
     728:	9f e0       	ldi	r25, 0x0F	; 15
     72a:	01 97       	sbiw	r24, 0x01	; 1
     72c:	f1 f7       	brne	.-4      	; 0x72a <LCD_DisplayChar+0x7c>
     72e:	00 c0       	rjmp	.+0      	; 0x730 <LCD_DisplayChar+0x82>
     730:	00 00       	nop
     732:	08 95       	ret

00000734 <LCD_Clear>:
	}
	
	void LCD_Clear(void)
	{
		/* Clear Screen */
		Send_instruction(Clear_display); 
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	0e 94 01 03 	call	0x602	; 0x602 <Send_instruction>
     73a:	08 95       	ret

0000073c <LCD_DisplayString>:
	}
	
	
	void LCD_DisplayString(char * ptr)
	{
     73c:	cf 93       	push	r28
     73e:	df 93       	push	r29
     740:	ec 01       	movw	r28, r24
		while(*ptr != '\0')
     742:	88 81       	ld	r24, Y
     744:	88 23       	and	r24, r24
     746:	31 f0       	breq	.+12     	; 0x754 <LCD_DisplayString+0x18>
     748:	21 96       	adiw	r28, 0x01	; 1
		{
			LCD_DisplayChar(*ptr);
     74a:	0e 94 57 03 	call	0x6ae	; 0x6ae <LCD_DisplayChar>
	}
	
	
	void LCD_DisplayString(char * ptr)
	{
		while(*ptr != '\0')
     74e:	89 91       	ld	r24, Y+
     750:	81 11       	cpse	r24, r1
     752:	fb cf       	rjmp	.-10     	; 0x74a <LCD_DisplayString+0xe>
		{
			LCD_DisplayChar(*ptr);
			ptr++;
		}
	}
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	08 95       	ret

0000075a <LCD_Select_RowCol>:
	
	void LCD_Select_RowCol(uint8_t Row , uint8_t col)
	{
		uint8_t Address=0;
		
		switch(Row)
     75a:	81 30       	cpi	r24, 0x01	; 1
     75c:	31 f0       	breq	.+12     	; 0x76a <LCD_Select_RowCol+0x10>
     75e:	60 f0       	brcs	.+24     	; 0x778 <LCD_Select_RowCol+0x1e>
     760:	82 30       	cpi	r24, 0x02	; 2
     762:	29 f0       	breq	.+10     	; 0x76e <LCD_Select_RowCol+0x14>
     764:	83 30       	cpi	r24, 0x03	; 3
     766:	29 f0       	breq	.+10     	; 0x772 <LCD_Select_RowCol+0x18>
     768:	06 c0       	rjmp	.+12     	; 0x776 <LCD_Select_RowCol+0x1c>
					/* When Writing To LCD 1st Col The Base Address is 0x00 */
						Address=col + LCD_1ST_BASE;
						break;
			case 1:
					/* When Writing To LCD 2nd Col The Base Address is 0x40 */
						Address=col + LCD_2ND_BASE;
     76a:	60 5c       	subi	r22, 0xC0	; 192
						break;
     76c:	05 c0       	rjmp	.+10     	; 0x778 <LCD_Select_RowCol+0x1e>
			case 2:
					/* When Writing To LCD 1st Col The Base Address is 0x10 */
						Address = col + LCD_3RD_BASE;
     76e:	60 5f       	subi	r22, 0xF0	; 240
						break;
     770:	03 c0       	rjmp	.+6      	; 0x778 <LCD_Select_RowCol+0x1e>
			case 3:
					/* When Writing To LCD 1st Col The Base Address is 0x50 */
						Address=col + LCD_4TH_BASE;
     772:	60 5b       	subi	r22, 0xB0	; 176
						break;		
     774:	01 c0       	rjmp	.+2      	; 0x778 <LCD_Select_RowCol+0x1e>
		}
	}
	
	void LCD_Select_RowCol(uint8_t Row , uint8_t col)
	{
		uint8_t Address=0;
     776:	60 e0       	ldi	r22, 0x00	; 0
						break;		
			default:
						break;
		}
		
		Send_instruction(DDRAM_CONST|Address);
     778:	86 2f       	mov	r24, r22
     77a:	80 68       	ori	r24, 0x80	; 128
     77c:	0e 94 01 03 	call	0x602	; 0x602 <Send_instruction>
     780:	08 95       	ret

00000782 <LCD_DisplayInt>:
	}
	
	
	void LCD_DisplayInt(int32_t data)
	{
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	cd b7       	in	r28, 0x3d	; 61
     788:	de b7       	in	r29, 0x3e	; 62
     78a:	65 97       	sbiw	r28, 0x15	; 21
     78c:	0f b6       	in	r0, 0x3f	; 63
     78e:	f8 94       	cli
     790:	de bf       	out	0x3e, r29	; 62
     792:	0f be       	out	0x3f, r0	; 63
     794:	cd bf       	out	0x3d, r28	; 61
     796:	dc 01       	movw	r26, r24
     798:	cb 01       	movw	r24, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     79a:	4a e0       	ldi	r20, 0x0A	; 10
     79c:	be 01       	movw	r22, r28
     79e:	6f 5f       	subi	r22, 0xFF	; 255
     7a0:	7f 4f       	sbci	r23, 0xFF	; 255
     7a2:	0e 94 5f 07 	call	0xebe	; 0xebe <__itoa_ncheck>
		/* String to hold the ascii result */
		char Result[21];
		 /* 10 for decimal */
		itoa(data,Result,10);
		/* Display The Result */
		LCD_DisplayString(Result);
     7a6:	ce 01       	movw	r24, r28
     7a8:	01 96       	adiw	r24, 0x01	; 1
     7aa:	0e 94 9e 03 	call	0x73c	; 0x73c <LCD_DisplayString>
	}
     7ae:	65 96       	adiw	r28, 0x15	; 21
     7b0:	0f b6       	in	r0, 0x3f	; 63
     7b2:	f8 94       	cli
     7b4:	de bf       	out	0x3e, r29	; 62
     7b6:	0f be       	out	0x3f, r0	; 63
     7b8:	cd bf       	out	0x3d, r28	; 61
     7ba:	df 91       	pop	r29
     7bc:	cf 91       	pop	r28
     7be:	08 95       	ret

000007c0 <ADC_Init>:
		ADCSRA->Data = ADC_Enable | Int_Mode | ConvMode | Freq_PreScale;		
	}
	
	void ADC_Disable(void)
	{
		ADCSRA->Data = ADC_Dis;
     7c0:	87 b9       	out	0x07, r24	; 7
     7c2:	20 68       	ori	r18, 0x80	; 128
     7c4:	42 2b       	or	r20, r18
     7c6:	64 2b       	or	r22, r20
     7c8:	66 b9       	out	0x06, r22	; 6
     7ca:	08 95       	ret

000007cc <ADC_Read_Polling>:
	
	uint16_t ADC_Read_Polling(
	ADC_Chanel Ch,
	ADC_Resolution Res)
	{
		ADMUX->Data &= 0xC0;
     7cc:	97 b1       	in	r25, 0x07	; 7
     7ce:	90 7c       	andi	r25, 0xC0	; 192
     7d0:	97 b9       	out	0x07, r25	; 7
		if ( Res == Resolution_8Bit)
     7d2:	60 32       	cpi	r22, 0x20	; 32
     7d4:	09 f4       	brne	.+2      	; 0x7d8 <ADC_Read_Polling+0xc>
		{
			ADMUX->Data |= (1<<5);
     7d6:	3d 9a       	sbi	0x07, 5	; 7
		}
		ADMUX->Data |= Ch;
     7d8:	97 b1       	in	r25, 0x07	; 7
     7da:	89 2b       	or	r24, r25
     7dc:	87 b9       	out	0x07, r24	; 7
		
		ADCSRA->Data |= (1<<6);
     7de:	36 9a       	sbi	0x06, 6	; 6
		/* Poll To Wait ADC Conv */
		while(READBIT(ADCSRA->Data,4) == 0x00){}
     7e0:	34 9b       	sbis	0x06, 4	; 6
     7e2:	fe cf       	rjmp	.-4      	; 0x7e0 <ADC_Read_Polling+0x14>
		/* Clear Interrupt Flag */
		SETBIT(ADCSRA->Data,4);
     7e4:	34 9a       	sbi	0x06, 4	; 6
		
		if (Res == Resolution_8Bit)
     7e6:	60 32       	cpi	r22, 0x20	; 32
     7e8:	19 f4       	brne	.+6      	; 0x7f0 <ADC_Read_Polling+0x24>
		{
			return ADCH->Data;
     7ea:	85 b1       	in	r24, 0x05	; 5
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	08 95       	ret
		}
		else
		{
			return ((ADCL->Data)|(ADCH->Data<<8));
     7f0:	84 b1       	in	r24, 0x04	; 4
     7f2:	25 b1       	in	r18, 0x05	; 5
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	92 2b       	or	r25, r18
		}
	}
     7f8:	08 95       	ret

000007fa <GPIO_DirectionSet>:

void GPIO_DirectionSet(
						volatile gio* Current_Gpio,
						PINS pin_number,
						IO_Modes  Mode)
{
     7fa:	fc 01       	movw	r30, r24
		switch (Mode)
     7fc:	41 30       	cpi	r20, 0x01	; 1
     7fe:	c9 f0       	breq	.+50     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
     800:	18 f0       	brcs	.+6      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     802:	42 30       	cpi	r20, 0x02	; 2
     804:	61 f1       	breq	.+88     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
     806:	08 95       	ret
		{
			case INPUT_FLOAT:
				 if (pin_number != ALLRegister)
     808:	68 30       	cpi	r22, 0x08	; 8
     80a:	81 f0       	breq	.+32     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
				 {
					 CLEARBIT(Current_Gpio->DDR.Data,pin_number);
     80c:	21 81       	ldd	r18, Z+1	; 0x01
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	02 c0       	rjmp	.+4      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     814:	88 0f       	add	r24, r24
     816:	99 1f       	adc	r25, r25
     818:	6a 95       	dec	r22
     81a:	e2 f7       	brpl	.-8      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     81c:	80 95       	com	r24
     81e:	92 2f       	mov	r25, r18
     820:	98 23       	and	r25, r24
     822:	91 83       	std	Z+1, r25	; 0x01
					 CLEARBIT(Current_Gpio->Port.Data,pin_number);
     824:	92 81       	ldd	r25, Z+2	; 0x02
     826:	89 23       	and	r24, r25
     828:	82 83       	std	Z+2, r24	; 0x02
     82a:	08 95       	ret
				 }
				 else
				 {
					 Current_Gpio->DDR.Data=0;
     82c:	11 82       	std	Z+1, r1	; 0x01
					 Current_Gpio->Port.Data=0;
     82e:	12 82       	std	Z+2, r1	; 0x02
     830:	08 95       	ret
				 }
			break;
			case INPUT_PULLUP:
				  if (pin_number != ALLRegister)
     832:	68 30       	cpi	r22, 0x08	; 8
     834:	81 f0       	breq	.+32     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
				  {
					  CLEARBIT(Current_Gpio->DDR.Data,pin_number);
     836:	21 81       	ldd	r18, Z+1	; 0x01
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	02 c0       	rjmp	.+4      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
     83e:	88 0f       	add	r24, r24
     840:	99 1f       	adc	r25, r25
     842:	6a 95       	dec	r22
     844:	e2 f7       	brpl	.-8      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
     846:	98 2f       	mov	r25, r24
     848:	90 95       	com	r25
     84a:	92 23       	and	r25, r18
     84c:	91 83       	std	Z+1, r25	; 0x01
					  SETBIT(Current_Gpio->Port.Data,pin_number);
     84e:	92 81       	ldd	r25, Z+2	; 0x02
     850:	89 2b       	or	r24, r25
     852:	82 83       	std	Z+2, r24	; 0x02
     854:	08 95       	ret
				  }
				  else
				  {
					  Current_Gpio->DDR.Data=0;
     856:	11 82       	std	Z+1, r1	; 0x01
					  Current_Gpio->Port.Data=0xff;
     858:	8f ef       	ldi	r24, 0xFF	; 255
     85a:	82 83       	std	Z+2, r24	; 0x02
     85c:	08 95       	ret
				  }
			break;
			case OUTPUT:
				  if (pin_number != ALLRegister)
     85e:	68 30       	cpi	r22, 0x08	; 8
     860:	81 f0       	breq	.+32     	; 0x882 <__stack+0x23>
				  {
					  SETBIT(Current_Gpio->DDR.Data,pin_number);
     862:	21 81       	ldd	r18, Z+1	; 0x01
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	02 c0       	rjmp	.+4      	; 0x86e <__stack+0xf>
     86a:	88 0f       	add	r24, r24
     86c:	99 1f       	adc	r25, r25
     86e:	6a 95       	dec	r22
     870:	e2 f7       	brpl	.-8      	; 0x86a <__stack+0xb>
     872:	92 2f       	mov	r25, r18
     874:	98 2b       	or	r25, r24
     876:	91 83       	std	Z+1, r25	; 0x01
					  CLEARBIT(Current_Gpio->Port.Data,pin_number);
     878:	92 81       	ldd	r25, Z+2	; 0x02
     87a:	80 95       	com	r24
     87c:	89 23       	and	r24, r25
     87e:	82 83       	std	Z+2, r24	; 0x02
     880:	08 95       	ret
				  }
				  else
				  {
					  Current_Gpio->DDR.Data=0xff;
     882:	8f ef       	ldi	r24, 0xFF	; 255
     884:	81 83       	std	Z+1, r24	; 0x01
					  Current_Gpio->Port.Data=0;
     886:	12 82       	std	Z+2, r1	; 0x02
     888:	08 95       	ret

0000088a <GPIO_OutputHandle>:
void GPIO_OutputHandle(
						volatile gio* Current_Gpio,
						PINS pin_number,
						DigitalValues Value)
{
	 if (pin_number != ALLRegister)
     88a:	68 30       	cpi	r22, 0x08	; 8
     88c:	d9 f0       	breq	.+54     	; 0x8c4 <GPIO_OutputHandle+0x3a>
	 {
		if ( Value == HIGH)
     88e:	41 30       	cpi	r20, 0x01	; 1
     890:	61 f4       	brne	.+24     	; 0x8aa <GPIO_OutputHandle+0x20>
		{
			SETBIT(Current_Gpio->Port.Data,pin_number);
     892:	fc 01       	movw	r30, r24
     894:	42 81       	ldd	r20, Z+2	; 0x02
     896:	21 e0       	ldi	r18, 0x01	; 1
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	02 c0       	rjmp	.+4      	; 0x8a0 <GPIO_OutputHandle+0x16>
     89c:	22 0f       	add	r18, r18
     89e:	33 1f       	adc	r19, r19
     8a0:	6a 95       	dec	r22
     8a2:	e2 f7       	brpl	.-8      	; 0x89c <GPIO_OutputHandle+0x12>
     8a4:	24 2b       	or	r18, r20
     8a6:	22 83       	std	Z+2, r18	; 0x02
     8a8:	08 95       	ret
		}
		else
		{
			CLEARBIT(Current_Gpio->Port.Data,pin_number);
     8aa:	fc 01       	movw	r30, r24
     8ac:	42 81       	ldd	r20, Z+2	; 0x02
     8ae:	21 e0       	ldi	r18, 0x01	; 1
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	02 c0       	rjmp	.+4      	; 0x8b8 <GPIO_OutputHandle+0x2e>
     8b4:	22 0f       	add	r18, r18
     8b6:	33 1f       	adc	r19, r19
     8b8:	6a 95       	dec	r22
     8ba:	e2 f7       	brpl	.-8      	; 0x8b4 <GPIO_OutputHandle+0x2a>
     8bc:	20 95       	com	r18
     8be:	24 23       	and	r18, r20
     8c0:	22 83       	std	Z+2, r18	; 0x02
     8c2:	08 95       	ret
		}
	 }
	 else
	 {
		 Current_Gpio->Port.Data = Value;
     8c4:	fc 01       	movw	r30, r24
     8c6:	42 83       	std	Z+2, r20	; 0x02
     8c8:	08 95       	ret

000008ca <GPIO_InputHandle>:

DigitalValues GPIO_InputHandle(
								volatile gio* Current_Gpio,
								PINS pin_number)
{
	 if (pin_number != ALLRegister)
     8ca:	68 30       	cpi	r22, 0x08	; 8
     8cc:	c1 f0       	breq	.+48     	; 0x8fe <GPIO_InputHandle+0x34>
	 {
		 if(READBIT(Current_Gpio->Pin.Data , pin_number) == 1)
     8ce:	fc 01       	movw	r30, r24
     8d0:	80 81       	ld	r24, Z
		 {
			return HIGH; 
     8d2:	21 e0       	ldi	r18, 0x01	; 1
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	06 2e       	mov	r0, r22
     8d8:	02 c0       	rjmp	.+4      	; 0x8de <GPIO_InputHandle+0x14>
     8da:	22 0f       	add	r18, r18
     8dc:	33 1f       	adc	r19, r19
     8de:	0a 94       	dec	r0
     8e0:	e2 f7       	brpl	.-8      	; 0x8da <GPIO_InputHandle+0x10>
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	28 23       	and	r18, r24
     8e6:	39 23       	and	r19, r25
     8e8:	02 c0       	rjmp	.+4      	; 0x8ee <GPIO_InputHandle+0x24>
     8ea:	35 95       	asr	r19
     8ec:	27 95       	ror	r18
     8ee:	6a 95       	dec	r22
     8f0:	e2 f7       	brpl	.-8      	; 0x8ea <GPIO_InputHandle+0x20>
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	21 30       	cpi	r18, 0x01	; 1
     8f6:	31 05       	cpc	r19, r1
     8f8:	21 f0       	breq	.+8      	; 0x902 <GPIO_InputHandle+0x38>
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	08 95       	ret
			 return LOW;
		 }
	 }
	 else
	 {
		 return Current_Gpio->Port.Data;
     8fe:	fc 01       	movw	r30, r24
     900:	82 81       	ldd	r24, Z+2	; 0x02
	 }
     902:	08 95       	ret

00000904 <__vector_1>:
	 void (*ISR0_ptr)(void)=NULL;
	 void (*ISR1_ptr)(void)=NULL;
	 void (*ISR2_ptr)(void)=NULL;

ISR(INT0_vect)
{
     904:	1f 92       	push	r1
     906:	0f 92       	push	r0
     908:	0f b6       	in	r0, 0x3f	; 63
     90a:	0f 92       	push	r0
     90c:	11 24       	eor	r1, r1
     90e:	2f 93       	push	r18
     910:	3f 93       	push	r19
     912:	4f 93       	push	r20
     914:	5f 93       	push	r21
     916:	6f 93       	push	r22
     918:	7f 93       	push	r23
     91a:	8f 93       	push	r24
     91c:	9f 93       	push	r25
     91e:	af 93       	push	r26
     920:	bf 93       	push	r27
     922:	ef 93       	push	r30
     924:	ff 93       	push	r31
	if (ISR0_ptr != NULL)
     926:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <ISR0_ptr>
     92a:	f0 91 12 01 	lds	r31, 0x0112	; 0x800112 <ISR0_ptr+0x1>
     92e:	30 97       	sbiw	r30, 0x00	; 0
     930:	09 f0       	breq	.+2      	; 0x934 <__vector_1+0x30>
	{
		ISR0_ptr();
     932:	09 95       	icall
	}	
	
}
     934:	ff 91       	pop	r31
     936:	ef 91       	pop	r30
     938:	bf 91       	pop	r27
     93a:	af 91       	pop	r26
     93c:	9f 91       	pop	r25
     93e:	8f 91       	pop	r24
     940:	7f 91       	pop	r23
     942:	6f 91       	pop	r22
     944:	5f 91       	pop	r21
     946:	4f 91       	pop	r20
     948:	3f 91       	pop	r19
     94a:	2f 91       	pop	r18
     94c:	0f 90       	pop	r0
     94e:	0f be       	out	0x3f, r0	; 63
     950:	0f 90       	pop	r0
     952:	1f 90       	pop	r1
     954:	18 95       	reti

00000956 <__vector_2>:


ISR(INT1_vect)
{
     956:	1f 92       	push	r1
     958:	0f 92       	push	r0
     95a:	0f b6       	in	r0, 0x3f	; 63
     95c:	0f 92       	push	r0
     95e:	11 24       	eor	r1, r1
     960:	2f 93       	push	r18
     962:	3f 93       	push	r19
     964:	4f 93       	push	r20
     966:	5f 93       	push	r21
     968:	6f 93       	push	r22
     96a:	7f 93       	push	r23
     96c:	8f 93       	push	r24
     96e:	9f 93       	push	r25
     970:	af 93       	push	r26
     972:	bf 93       	push	r27
     974:	ef 93       	push	r30
     976:	ff 93       	push	r31
	if (ISR1_ptr != NULL)
     978:	e0 91 0f 01 	lds	r30, 0x010F	; 0x80010f <ISR1_ptr>
     97c:	f0 91 10 01 	lds	r31, 0x0110	; 0x800110 <ISR1_ptr+0x1>
     980:	30 97       	sbiw	r30, 0x00	; 0
     982:	09 f0       	breq	.+2      	; 0x986 <__vector_2+0x30>
	{
		ISR1_ptr();
     984:	09 95       	icall
	}
}
     986:	ff 91       	pop	r31
     988:	ef 91       	pop	r30
     98a:	bf 91       	pop	r27
     98c:	af 91       	pop	r26
     98e:	9f 91       	pop	r25
     990:	8f 91       	pop	r24
     992:	7f 91       	pop	r23
     994:	6f 91       	pop	r22
     996:	5f 91       	pop	r21
     998:	4f 91       	pop	r20
     99a:	3f 91       	pop	r19
     99c:	2f 91       	pop	r18
     99e:	0f 90       	pop	r0
     9a0:	0f be       	out	0x3f, r0	; 63
     9a2:	0f 90       	pop	r0
     9a4:	1f 90       	pop	r1
     9a6:	18 95       	reti

000009a8 <__vector_3>:
ISR(INT2_vect)
{
     9a8:	1f 92       	push	r1
     9aa:	0f 92       	push	r0
     9ac:	0f b6       	in	r0, 0x3f	; 63
     9ae:	0f 92       	push	r0
     9b0:	11 24       	eor	r1, r1
     9b2:	2f 93       	push	r18
     9b4:	3f 93       	push	r19
     9b6:	4f 93       	push	r20
     9b8:	5f 93       	push	r21
     9ba:	6f 93       	push	r22
     9bc:	7f 93       	push	r23
     9be:	8f 93       	push	r24
     9c0:	9f 93       	push	r25
     9c2:	af 93       	push	r26
     9c4:	bf 93       	push	r27
     9c6:	ef 93       	push	r30
     9c8:	ff 93       	push	r31
	if (ISR2_ptr != NULL)
     9ca:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <ISR2_ptr>
     9ce:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <ISR2_ptr+0x1>
     9d2:	30 97       	sbiw	r30, 0x00	; 0
     9d4:	09 f0       	breq	.+2      	; 0x9d8 <__vector_3+0x30>
	{
		ISR2_ptr();
     9d6:	09 95       	icall
	}
}
     9d8:	ff 91       	pop	r31
     9da:	ef 91       	pop	r30
     9dc:	bf 91       	pop	r27
     9de:	af 91       	pop	r26
     9e0:	9f 91       	pop	r25
     9e2:	8f 91       	pop	r24
     9e4:	7f 91       	pop	r23
     9e6:	6f 91       	pop	r22
     9e8:	5f 91       	pop	r21
     9ea:	4f 91       	pop	r20
     9ec:	3f 91       	pop	r19
     9ee:	2f 91       	pop	r18
     9f0:	0f 90       	pop	r0
     9f2:	0f be       	out	0x3f, r0	; 63
     9f4:	0f 90       	pop	r0
     9f6:	1f 90       	pop	r1
     9f8:	18 95       	reti

000009fa <ExInt_UserWarning_Error>:

void ExInt_UserWarning_Error(void)
{
	while(1)
	{
		printf("!! SomeThing Went Wrong !! Please Re Check Your Settings !!");
     9fa:	c7 ec       	ldi	r28, 0xC7	; 199
     9fc:	d0 e0       	ldi	r29, 0x00	; 0
     9fe:	df 93       	push	r29
     a00:	cf 93       	push	r28
     a02:	0e 94 84 07 	call	0xf08	; 0xf08 <printf>
     a06:	0f 90       	pop	r0
     a08:	0f 90       	pop	r0
     a0a:	f9 cf       	rjmp	.-14     	; 0x9fe <ExInt_UserWarning_Error+0x4>

00000a0c <Ext_InterruptEnable>:
	}
}

void Ext_InterruptEnable(Atmega32A_ExternalInterrupts int_num,Ex_InterruptModes  Mode)
{
	 switch (int_num)
     a0c:	81 30       	cpi	r24, 0x01	; 1
     a0e:	79 f1       	breq	.+94     	; 0xa6e <Ext_InterruptEnable+0x62>
     a10:	20 f0       	brcs	.+8      	; 0xa1a <Ext_InterruptEnable+0xe>
     a12:	82 30       	cpi	r24, 0x02	; 2
     a14:	09 f4       	brne	.+2      	; 0xa18 <Ext_InterruptEnable+0xc>
     a16:	55 c0       	rjmp	.+170    	; 0xac2 <Ext_InterruptEnable+0xb6>
     a18:	66 c0       	rjmp	.+204    	; 0xae6 <Ext_InterruptEnable+0xda>
	 {
		 case Interrupt0:
			  if      (Mode == RisingMode)
     a1a:	61 11       	cpse	r22, r1
     a1c:	07 c0       	rjmp	.+14     	; 0xa2c <Ext_InterruptEnable+0x20>
			  {
				  MCUCR->Bits.B0=1;
     a1e:	85 b7       	in	r24, 0x35	; 53
     a20:	81 60       	ori	r24, 0x01	; 1
     a22:	85 bf       	out	0x35, r24	; 53
				  MCUCR ->Bits.B1=1;
     a24:	85 b7       	in	r24, 0x35	; 53
     a26:	82 60       	ori	r24, 0x02	; 2
     a28:	85 bf       	out	0x35, r24	; 53
     a2a:	1d c0       	rjmp	.+58     	; 0xa66 <Ext_InterruptEnable+0x5a>
			  }
			  else if (Mode	== FallingMode)
     a2c:	61 30       	cpi	r22, 0x01	; 1
     a2e:	39 f4       	brne	.+14     	; 0xa3e <Ext_InterruptEnable+0x32>
			  {
				  MCUCR ->Bits.B0=0;
     a30:	85 b7       	in	r24, 0x35	; 53
     a32:	8e 7f       	andi	r24, 0xFE	; 254
     a34:	85 bf       	out	0x35, r24	; 53
				  MCUCR ->Bits.B1=1;
     a36:	85 b7       	in	r24, 0x35	; 53
     a38:	82 60       	ori	r24, 0x02	; 2
     a3a:	85 bf       	out	0x35, r24	; 53
     a3c:	14 c0       	rjmp	.+40     	; 0xa66 <Ext_InterruptEnable+0x5a>
			  }
			  else if (Mode == BothEdges)
     a3e:	62 30       	cpi	r22, 0x02	; 2
     a40:	39 f4       	brne	.+14     	; 0xa50 <Ext_InterruptEnable+0x44>
			  {
				  MCUCR ->Bits.B0=1;
     a42:	85 b7       	in	r24, 0x35	; 53
     a44:	81 60       	ori	r24, 0x01	; 1
     a46:	85 bf       	out	0x35, r24	; 53
				  MCUCR ->Bits.B1=0;
     a48:	85 b7       	in	r24, 0x35	; 53
     a4a:	8d 7f       	andi	r24, 0xFD	; 253
     a4c:	85 bf       	out	0x35, r24	; 53
     a4e:	0b c0       	rjmp	.+22     	; 0xa66 <Ext_InterruptEnable+0x5a>
			  }
			  else if (Mode == LOW_Level)
     a50:	63 30       	cpi	r22, 0x03	; 3
     a52:	39 f4       	brne	.+14     	; 0xa62 <Ext_InterruptEnable+0x56>
			  {
				  MCUCR ->Bits.B0=0;
     a54:	85 b7       	in	r24, 0x35	; 53
     a56:	8e 7f       	andi	r24, 0xFE	; 254
     a58:	85 bf       	out	0x35, r24	; 53
				  MCUCR ->Bits.B1=0;
     a5a:	85 b7       	in	r24, 0x35	; 53
     a5c:	8d 7f       	andi	r24, 0xFD	; 253
     a5e:	85 bf       	out	0x35, r24	; 53
     a60:	02 c0       	rjmp	.+4      	; 0xa66 <Ext_InterruptEnable+0x5a>
			  }
			  else
			  {
				  ExInt_UserWarning_Error();
     a62:	0e 94 fd 04 	call	0x9fa	; 0x9fa <ExInt_UserWarning_Error>
			  }
			  /* this Line Enables External Interrupt 0 */
			  GICR->Bits.B6=1;
     a66:	8b b7       	in	r24, 0x3b	; 59
     a68:	80 64       	ori	r24, 0x40	; 64
     a6a:	8b bf       	out	0x3b, r24	; 59
		 break;
     a6c:	08 95       	ret
		 case Interrupt1:
			  if      (Mode == RisingMode)
     a6e:	61 11       	cpse	r22, r1
     a70:	07 c0       	rjmp	.+14     	; 0xa80 <Ext_InterruptEnable+0x74>
			  {
				  MCUCR ->Bits.B3=1;
     a72:	85 b7       	in	r24, 0x35	; 53
     a74:	88 60       	ori	r24, 0x08	; 8
     a76:	85 bf       	out	0x35, r24	; 53
				  MCUCR ->Bits.B2=1;
     a78:	85 b7       	in	r24, 0x35	; 53
     a7a:	84 60       	ori	r24, 0x04	; 4
     a7c:	85 bf       	out	0x35, r24	; 53
     a7e:	1d c0       	rjmp	.+58     	; 0xaba <Ext_InterruptEnable+0xae>
			  }
			  else if (Mode	== FallingMode)
     a80:	61 30       	cpi	r22, 0x01	; 1
     a82:	39 f4       	brne	.+14     	; 0xa92 <Ext_InterruptEnable+0x86>
			  {
				  MCUCR ->Bits.B3=1;
     a84:	85 b7       	in	r24, 0x35	; 53
     a86:	88 60       	ori	r24, 0x08	; 8
     a88:	85 bf       	out	0x35, r24	; 53
				  MCUCR ->Bits.B2=0;
     a8a:	85 b7       	in	r24, 0x35	; 53
     a8c:	8b 7f       	andi	r24, 0xFB	; 251
     a8e:	85 bf       	out	0x35, r24	; 53
     a90:	14 c0       	rjmp	.+40     	; 0xaba <Ext_InterruptEnable+0xae>
			  }
			  else if (Mode == BothEdges)
     a92:	62 30       	cpi	r22, 0x02	; 2
     a94:	39 f4       	brne	.+14     	; 0xaa4 <Ext_InterruptEnable+0x98>
			  {
				  MCUCR ->Bits.B3=0;
     a96:	85 b7       	in	r24, 0x35	; 53
     a98:	87 7f       	andi	r24, 0xF7	; 247
     a9a:	85 bf       	out	0x35, r24	; 53
				  MCUCR ->Bits.B2=1;
     a9c:	85 b7       	in	r24, 0x35	; 53
     a9e:	84 60       	ori	r24, 0x04	; 4
     aa0:	85 bf       	out	0x35, r24	; 53
     aa2:	0b c0       	rjmp	.+22     	; 0xaba <Ext_InterruptEnable+0xae>
			  }
			  else if (Mode == LOW_Level)
     aa4:	63 30       	cpi	r22, 0x03	; 3
     aa6:	39 f4       	brne	.+14     	; 0xab6 <Ext_InterruptEnable+0xaa>
			  {
				  MCUCR ->Bits.B3=0;
     aa8:	85 b7       	in	r24, 0x35	; 53
     aaa:	87 7f       	andi	r24, 0xF7	; 247
     aac:	85 bf       	out	0x35, r24	; 53
				  MCUCR ->Bits.B2=0;
     aae:	85 b7       	in	r24, 0x35	; 53
     ab0:	8b 7f       	andi	r24, 0xFB	; 251
     ab2:	85 bf       	out	0x35, r24	; 53
     ab4:	02 c0       	rjmp	.+4      	; 0xaba <Ext_InterruptEnable+0xae>
			  }
			  else
			  {
				  ExInt_UserWarning_Error();
     ab6:	0e 94 fd 04 	call	0x9fa	; 0x9fa <ExInt_UserWarning_Error>
			  }
			  /* this Line Enables External Interrupt 1 */
			  GICR->Bits.B7=1;
     aba:	8b b7       	in	r24, 0x3b	; 59
     abc:	80 68       	ori	r24, 0x80	; 128
     abe:	8b bf       	out	0x3b, r24	; 59
		 break;
     ac0:	08 95       	ret
		 case Interrupt2:
			  if      (Mode == RisingMode)
     ac2:	61 11       	cpse	r22, r1
     ac4:	04 c0       	rjmp	.+8      	; 0xace <Ext_InterruptEnable+0xc2>
			  {
				 MCUCSR->Bits.B6=1; 
     ac6:	84 b7       	in	r24, 0x34	; 52
     ac8:	80 64       	ori	r24, 0x40	; 64
     aca:	84 bf       	out	0x34, r24	; 52
     acc:	08 c0       	rjmp	.+16     	; 0xade <Ext_InterruptEnable+0xd2>
			  }
			  else if (Mode	== FallingMode)
     ace:	61 30       	cpi	r22, 0x01	; 1
     ad0:	21 f4       	brne	.+8      	; 0xada <Ext_InterruptEnable+0xce>
			  {
				  MCUCSR->Bits.B6=0; 
     ad2:	84 b7       	in	r24, 0x34	; 52
     ad4:	8f 7b       	andi	r24, 0xBF	; 191
     ad6:	84 bf       	out	0x34, r24	; 52
     ad8:	02 c0       	rjmp	.+4      	; 0xade <Ext_InterruptEnable+0xd2>
			  }
			  else
			  {
				  ExInt_UserWarning_Error();
     ada:	0e 94 fd 04 	call	0x9fa	; 0x9fa <ExInt_UserWarning_Error>
			  }
			  /* this Line Enables External Interrupt 2 */
			  GICR->Bits.B5=1;
     ade:	8b b7       	in	r24, 0x3b	; 59
     ae0:	80 62       	ori	r24, 0x20	; 32
     ae2:	8b bf       	out	0x3b, r24	; 59
		 break;
     ae4:	08 95       	ret
		 default:
				  ExInt_UserWarning_Error();
     ae6:	0e 94 fd 04 	call	0x9fa	; 0x9fa <ExInt_UserWarning_Error>

00000aea <__vector_11>:

void (* volatile Timer0_ISR_OVF)(void) = NULL;
void (* volatile Timer0_ISR_COMP)(void) = NULL;

ISR(TIMER0_OVF_vect)
{
     aea:	1f 92       	push	r1
     aec:	0f 92       	push	r0
     aee:	0f b6       	in	r0, 0x3f	; 63
     af0:	0f 92       	push	r0
     af2:	11 24       	eor	r1, r1
     af4:	2f 93       	push	r18
     af6:	3f 93       	push	r19
     af8:	4f 93       	push	r20
     afa:	5f 93       	push	r21
     afc:	6f 93       	push	r22
     afe:	7f 93       	push	r23
     b00:	8f 93       	push	r24
     b02:	9f 93       	push	r25
     b04:	af 93       	push	r26
     b06:	bf 93       	push	r27
     b08:	ef 93       	push	r30
     b0a:	ff 93       	push	r31
	if (Timer0_ISR_OVF != NULL)
     b0c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <Timer0_ISR_OVF>
     b10:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <Timer0_ISR_OVF+0x1>
     b14:	89 2b       	or	r24, r25
     b16:	29 f0       	breq	.+10     	; 0xb22 <__vector_11+0x38>
	{
		Timer0_ISR_OVF();
     b18:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <Timer0_ISR_OVF>
     b1c:	f0 91 16 01 	lds	r31, 0x0116	; 0x800116 <Timer0_ISR_OVF+0x1>
     b20:	09 95       	icall
	}
}
     b22:	ff 91       	pop	r31
     b24:	ef 91       	pop	r30
     b26:	bf 91       	pop	r27
     b28:	af 91       	pop	r26
     b2a:	9f 91       	pop	r25
     b2c:	8f 91       	pop	r24
     b2e:	7f 91       	pop	r23
     b30:	6f 91       	pop	r22
     b32:	5f 91       	pop	r21
     b34:	4f 91       	pop	r20
     b36:	3f 91       	pop	r19
     b38:	2f 91       	pop	r18
     b3a:	0f 90       	pop	r0
     b3c:	0f be       	out	0x3f, r0	; 63
     b3e:	0f 90       	pop	r0
     b40:	1f 90       	pop	r1
     b42:	18 95       	reti

00000b44 <__vector_10>:
ISR(TIMER0_COMP_vect)
{
     b44:	1f 92       	push	r1
     b46:	0f 92       	push	r0
     b48:	0f b6       	in	r0, 0x3f	; 63
     b4a:	0f 92       	push	r0
     b4c:	11 24       	eor	r1, r1
     b4e:	2f 93       	push	r18
     b50:	3f 93       	push	r19
     b52:	4f 93       	push	r20
     b54:	5f 93       	push	r21
     b56:	6f 93       	push	r22
     b58:	7f 93       	push	r23
     b5a:	8f 93       	push	r24
     b5c:	9f 93       	push	r25
     b5e:	af 93       	push	r26
     b60:	bf 93       	push	r27
     b62:	ef 93       	push	r30
     b64:	ff 93       	push	r31
	if (Timer0_ISR_COMP != NULL)
     b66:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <Timer0_ISR_COMP>
     b6a:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <Timer0_ISR_COMP+0x1>
     b6e:	89 2b       	or	r24, r25
     b70:	29 f0       	breq	.+10     	; 0xb7c <__vector_10+0x38>
	{
		Timer0_ISR_COMP();
     b72:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <Timer0_ISR_COMP>
     b76:	f0 91 14 01 	lds	r31, 0x0114	; 0x800114 <Timer0_ISR_COMP+0x1>
     b7a:	09 95       	icall
	}
}
     b7c:	ff 91       	pop	r31
     b7e:	ef 91       	pop	r30
     b80:	bf 91       	pop	r27
     b82:	af 91       	pop	r26
     b84:	9f 91       	pop	r25
     b86:	8f 91       	pop	r24
     b88:	7f 91       	pop	r23
     b8a:	6f 91       	pop	r22
     b8c:	5f 91       	pop	r21
     b8e:	4f 91       	pop	r20
     b90:	3f 91       	pop	r19
     b92:	2f 91       	pop	r18
     b94:	0f 90       	pop	r0
     b96:	0f be       	out	0x3f, r0	; 63
     b98:	0f 90       	pop	r0
     b9a:	1f 90       	pop	r1
     b9c:	18 95       	reti

00000b9e <eeprom_write>:
 */ 

 #include <eeprom.h>

  void eeprom_write ( uint16_t address, uint8_t byte ) {  //write a byte to the AVR EEPROM
	  while (EECR &  (1<<EEWE)) ;                 //wait until any write operation is complete
     b9e:	e1 99       	sbic	0x1c, 1	; 28
     ba0:	fe cf       	rjmp	.-4      	; 0xb9e <eeprom_write>
	  EEAR = address;                            //set the desired address
     ba2:	9f bb       	out	0x1f, r25	; 31
     ba4:	8e bb       	out	0x1e, r24	; 30
	  EEDR = byte;                               //set the desired byte
     ba6:	6d bb       	out	0x1d, r22	; 29
	  EECR |= (1<<EEMWE);
     ba8:	e2 9a       	sbi	0x1c, 2	; 28
	  /* Start eeprom write by setting EEWE */
	  EECR |= (1<<EEWE);                    //start the write operation
     baa:	e1 9a       	sbi	0x1c, 1	; 28
     bac:	08 95       	ret

00000bae <eeprom_read>:
  }

  uint8_t eeprom_read( uint16_t address ) 
  {     //read a byte from the AVR EEPROM
	  while(EECR & (1<<EEWE));
     bae:	e1 99       	sbic	0x1c, 1	; 28
     bb0:	fe cf       	rjmp	.-4      	; 0xbae <eeprom_read>
	  EEAR = address;                            //set the desired address
     bb2:	9f bb       	out	0x1f, r25	; 31
     bb4:	8e bb       	out	0x1e, r24	; 30
	  EECR |= ( 1 << EERE );                     //trigger a read operation
     bb6:	e0 9a       	sbi	0x1c, 0	; 28
	  return EEDR;                               //return the data
     bb8:	8d b3       	in	r24, 0x1d	; 29
     bba:	08 95       	ret

00000bbc <__cmpsf2>:
     bbc:	0e 94 56 06 	call	0xcac	; 0xcac <__fp_cmp>
     bc0:	08 f4       	brcc	.+2      	; 0xbc4 <__cmpsf2+0x8>
     bc2:	81 e0       	ldi	r24, 0x01	; 1
     bc4:	08 95       	ret

00000bc6 <__fixsfsi>:
     bc6:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <__fixunssfsi>
     bca:	68 94       	set
     bcc:	b1 11       	cpse	r27, r1
     bce:	0c 94 c5 06 	jmp	0xd8a	; 0xd8a <__fp_szero>
     bd2:	08 95       	ret

00000bd4 <__fixunssfsi>:
     bd4:	0e 94 aa 06 	call	0xd54	; 0xd54 <__fp_splitA>
     bd8:	88 f0       	brcs	.+34     	; 0xbfc <__fixunssfsi+0x28>
     bda:	9f 57       	subi	r25, 0x7F	; 127
     bdc:	98 f0       	brcs	.+38     	; 0xc04 <__fixunssfsi+0x30>
     bde:	b9 2f       	mov	r27, r25
     be0:	99 27       	eor	r25, r25
     be2:	b7 51       	subi	r27, 0x17	; 23
     be4:	b0 f0       	brcs	.+44     	; 0xc12 <__fixunssfsi+0x3e>
     be6:	e1 f0       	breq	.+56     	; 0xc20 <__fixunssfsi+0x4c>
     be8:	66 0f       	add	r22, r22
     bea:	77 1f       	adc	r23, r23
     bec:	88 1f       	adc	r24, r24
     bee:	99 1f       	adc	r25, r25
     bf0:	1a f0       	brmi	.+6      	; 0xbf8 <__fixunssfsi+0x24>
     bf2:	ba 95       	dec	r27
     bf4:	c9 f7       	brne	.-14     	; 0xbe8 <__fixunssfsi+0x14>
     bf6:	14 c0       	rjmp	.+40     	; 0xc20 <__fixunssfsi+0x4c>
     bf8:	b1 30       	cpi	r27, 0x01	; 1
     bfa:	91 f0       	breq	.+36     	; 0xc20 <__fixunssfsi+0x4c>
     bfc:	0e 94 c4 06 	call	0xd88	; 0xd88 <__fp_zero>
     c00:	b1 e0       	ldi	r27, 0x01	; 1
     c02:	08 95       	ret
     c04:	0c 94 c4 06 	jmp	0xd88	; 0xd88 <__fp_zero>
     c08:	67 2f       	mov	r22, r23
     c0a:	78 2f       	mov	r23, r24
     c0c:	88 27       	eor	r24, r24
     c0e:	b8 5f       	subi	r27, 0xF8	; 248
     c10:	39 f0       	breq	.+14     	; 0xc20 <__fixunssfsi+0x4c>
     c12:	b9 3f       	cpi	r27, 0xF9	; 249
     c14:	cc f3       	brlt	.-14     	; 0xc08 <__fixunssfsi+0x34>
     c16:	86 95       	lsr	r24
     c18:	77 95       	ror	r23
     c1a:	67 95       	ror	r22
     c1c:	b3 95       	inc	r27
     c1e:	d9 f7       	brne	.-10     	; 0xc16 <__fixunssfsi+0x42>
     c20:	3e f4       	brtc	.+14     	; 0xc30 <__fixunssfsi+0x5c>
     c22:	90 95       	com	r25
     c24:	80 95       	com	r24
     c26:	70 95       	com	r23
     c28:	61 95       	neg	r22
     c2a:	7f 4f       	sbci	r23, 0xFF	; 255
     c2c:	8f 4f       	sbci	r24, 0xFF	; 255
     c2e:	9f 4f       	sbci	r25, 0xFF	; 255
     c30:	08 95       	ret

00000c32 <__floatunsisf>:
     c32:	e8 94       	clt
     c34:	09 c0       	rjmp	.+18     	; 0xc48 <__floatsisf+0x12>

00000c36 <__floatsisf>:
     c36:	97 fb       	bst	r25, 7
     c38:	3e f4       	brtc	.+14     	; 0xc48 <__floatsisf+0x12>
     c3a:	90 95       	com	r25
     c3c:	80 95       	com	r24
     c3e:	70 95       	com	r23
     c40:	61 95       	neg	r22
     c42:	7f 4f       	sbci	r23, 0xFF	; 255
     c44:	8f 4f       	sbci	r24, 0xFF	; 255
     c46:	9f 4f       	sbci	r25, 0xFF	; 255
     c48:	99 23       	and	r25, r25
     c4a:	a9 f0       	breq	.+42     	; 0xc76 <__floatsisf+0x40>
     c4c:	f9 2f       	mov	r31, r25
     c4e:	96 e9       	ldi	r25, 0x96	; 150
     c50:	bb 27       	eor	r27, r27
     c52:	93 95       	inc	r25
     c54:	f6 95       	lsr	r31
     c56:	87 95       	ror	r24
     c58:	77 95       	ror	r23
     c5a:	67 95       	ror	r22
     c5c:	b7 95       	ror	r27
     c5e:	f1 11       	cpse	r31, r1
     c60:	f8 cf       	rjmp	.-16     	; 0xc52 <__floatsisf+0x1c>
     c62:	fa f4       	brpl	.+62     	; 0xca2 <__floatsisf+0x6c>
     c64:	bb 0f       	add	r27, r27
     c66:	11 f4       	brne	.+4      	; 0xc6c <__floatsisf+0x36>
     c68:	60 ff       	sbrs	r22, 0
     c6a:	1b c0       	rjmp	.+54     	; 0xca2 <__floatsisf+0x6c>
     c6c:	6f 5f       	subi	r22, 0xFF	; 255
     c6e:	7f 4f       	sbci	r23, 0xFF	; 255
     c70:	8f 4f       	sbci	r24, 0xFF	; 255
     c72:	9f 4f       	sbci	r25, 0xFF	; 255
     c74:	16 c0       	rjmp	.+44     	; 0xca2 <__floatsisf+0x6c>
     c76:	88 23       	and	r24, r24
     c78:	11 f0       	breq	.+4      	; 0xc7e <__floatsisf+0x48>
     c7a:	96 e9       	ldi	r25, 0x96	; 150
     c7c:	11 c0       	rjmp	.+34     	; 0xca0 <__floatsisf+0x6a>
     c7e:	77 23       	and	r23, r23
     c80:	21 f0       	breq	.+8      	; 0xc8a <__floatsisf+0x54>
     c82:	9e e8       	ldi	r25, 0x8E	; 142
     c84:	87 2f       	mov	r24, r23
     c86:	76 2f       	mov	r23, r22
     c88:	05 c0       	rjmp	.+10     	; 0xc94 <__floatsisf+0x5e>
     c8a:	66 23       	and	r22, r22
     c8c:	71 f0       	breq	.+28     	; 0xcaa <__floatsisf+0x74>
     c8e:	96 e8       	ldi	r25, 0x86	; 134
     c90:	86 2f       	mov	r24, r22
     c92:	70 e0       	ldi	r23, 0x00	; 0
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	2a f0       	brmi	.+10     	; 0xca2 <__floatsisf+0x6c>
     c98:	9a 95       	dec	r25
     c9a:	66 0f       	add	r22, r22
     c9c:	77 1f       	adc	r23, r23
     c9e:	88 1f       	adc	r24, r24
     ca0:	da f7       	brpl	.-10     	; 0xc98 <__floatsisf+0x62>
     ca2:	88 0f       	add	r24, r24
     ca4:	96 95       	lsr	r25
     ca6:	87 95       	ror	r24
     ca8:	97 f9       	bld	r25, 7
     caa:	08 95       	ret

00000cac <__fp_cmp>:
     cac:	99 0f       	add	r25, r25
     cae:	00 08       	sbc	r0, r0
     cb0:	55 0f       	add	r21, r21
     cb2:	aa 0b       	sbc	r26, r26
     cb4:	e0 e8       	ldi	r30, 0x80	; 128
     cb6:	fe ef       	ldi	r31, 0xFE	; 254
     cb8:	16 16       	cp	r1, r22
     cba:	17 06       	cpc	r1, r23
     cbc:	e8 07       	cpc	r30, r24
     cbe:	f9 07       	cpc	r31, r25
     cc0:	c0 f0       	brcs	.+48     	; 0xcf2 <__fp_cmp+0x46>
     cc2:	12 16       	cp	r1, r18
     cc4:	13 06       	cpc	r1, r19
     cc6:	e4 07       	cpc	r30, r20
     cc8:	f5 07       	cpc	r31, r21
     cca:	98 f0       	brcs	.+38     	; 0xcf2 <__fp_cmp+0x46>
     ccc:	62 1b       	sub	r22, r18
     cce:	73 0b       	sbc	r23, r19
     cd0:	84 0b       	sbc	r24, r20
     cd2:	95 0b       	sbc	r25, r21
     cd4:	39 f4       	brne	.+14     	; 0xce4 <__fp_cmp+0x38>
     cd6:	0a 26       	eor	r0, r26
     cd8:	61 f0       	breq	.+24     	; 0xcf2 <__fp_cmp+0x46>
     cda:	23 2b       	or	r18, r19
     cdc:	24 2b       	or	r18, r20
     cde:	25 2b       	or	r18, r21
     ce0:	21 f4       	brne	.+8      	; 0xcea <__fp_cmp+0x3e>
     ce2:	08 95       	ret
     ce4:	0a 26       	eor	r0, r26
     ce6:	09 f4       	brne	.+2      	; 0xcea <__fp_cmp+0x3e>
     ce8:	a1 40       	sbci	r26, 0x01	; 1
     cea:	a6 95       	lsr	r26
     cec:	8f ef       	ldi	r24, 0xFF	; 255
     cee:	81 1d       	adc	r24, r1
     cf0:	81 1d       	adc	r24, r1
     cf2:	08 95       	ret

00000cf4 <__fp_inf>:
     cf4:	97 f9       	bld	r25, 7
     cf6:	9f 67       	ori	r25, 0x7F	; 127
     cf8:	80 e8       	ldi	r24, 0x80	; 128
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	60 e0       	ldi	r22, 0x00	; 0
     cfe:	08 95       	ret

00000d00 <__fp_nan>:
     d00:	9f ef       	ldi	r25, 0xFF	; 255
     d02:	80 ec       	ldi	r24, 0xC0	; 192
     d04:	08 95       	ret

00000d06 <__fp_pscA>:
     d06:	00 24       	eor	r0, r0
     d08:	0a 94       	dec	r0
     d0a:	16 16       	cp	r1, r22
     d0c:	17 06       	cpc	r1, r23
     d0e:	18 06       	cpc	r1, r24
     d10:	09 06       	cpc	r0, r25
     d12:	08 95       	ret

00000d14 <__fp_pscB>:
     d14:	00 24       	eor	r0, r0
     d16:	0a 94       	dec	r0
     d18:	12 16       	cp	r1, r18
     d1a:	13 06       	cpc	r1, r19
     d1c:	14 06       	cpc	r1, r20
     d1e:	05 06       	cpc	r0, r21
     d20:	08 95       	ret

00000d22 <__fp_round>:
     d22:	09 2e       	mov	r0, r25
     d24:	03 94       	inc	r0
     d26:	00 0c       	add	r0, r0
     d28:	11 f4       	brne	.+4      	; 0xd2e <__fp_round+0xc>
     d2a:	88 23       	and	r24, r24
     d2c:	52 f0       	brmi	.+20     	; 0xd42 <__fp_round+0x20>
     d2e:	bb 0f       	add	r27, r27
     d30:	40 f4       	brcc	.+16     	; 0xd42 <__fp_round+0x20>
     d32:	bf 2b       	or	r27, r31
     d34:	11 f4       	brne	.+4      	; 0xd3a <__fp_round+0x18>
     d36:	60 ff       	sbrs	r22, 0
     d38:	04 c0       	rjmp	.+8      	; 0xd42 <__fp_round+0x20>
     d3a:	6f 5f       	subi	r22, 0xFF	; 255
     d3c:	7f 4f       	sbci	r23, 0xFF	; 255
     d3e:	8f 4f       	sbci	r24, 0xFF	; 255
     d40:	9f 4f       	sbci	r25, 0xFF	; 255
     d42:	08 95       	ret

00000d44 <__fp_split3>:
     d44:	57 fd       	sbrc	r21, 7
     d46:	90 58       	subi	r25, 0x80	; 128
     d48:	44 0f       	add	r20, r20
     d4a:	55 1f       	adc	r21, r21
     d4c:	59 f0       	breq	.+22     	; 0xd64 <__fp_splitA+0x10>
     d4e:	5f 3f       	cpi	r21, 0xFF	; 255
     d50:	71 f0       	breq	.+28     	; 0xd6e <__fp_splitA+0x1a>
     d52:	47 95       	ror	r20

00000d54 <__fp_splitA>:
     d54:	88 0f       	add	r24, r24
     d56:	97 fb       	bst	r25, 7
     d58:	99 1f       	adc	r25, r25
     d5a:	61 f0       	breq	.+24     	; 0xd74 <__fp_splitA+0x20>
     d5c:	9f 3f       	cpi	r25, 0xFF	; 255
     d5e:	79 f0       	breq	.+30     	; 0xd7e <__fp_splitA+0x2a>
     d60:	87 95       	ror	r24
     d62:	08 95       	ret
     d64:	12 16       	cp	r1, r18
     d66:	13 06       	cpc	r1, r19
     d68:	14 06       	cpc	r1, r20
     d6a:	55 1f       	adc	r21, r21
     d6c:	f2 cf       	rjmp	.-28     	; 0xd52 <__fp_split3+0xe>
     d6e:	46 95       	lsr	r20
     d70:	f1 df       	rcall	.-30     	; 0xd54 <__fp_splitA>
     d72:	08 c0       	rjmp	.+16     	; 0xd84 <__fp_splitA+0x30>
     d74:	16 16       	cp	r1, r22
     d76:	17 06       	cpc	r1, r23
     d78:	18 06       	cpc	r1, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	f1 cf       	rjmp	.-30     	; 0xd60 <__fp_splitA+0xc>
     d7e:	86 95       	lsr	r24
     d80:	71 05       	cpc	r23, r1
     d82:	61 05       	cpc	r22, r1
     d84:	08 94       	sec
     d86:	08 95       	ret

00000d88 <__fp_zero>:
     d88:	e8 94       	clt

00000d8a <__fp_szero>:
     d8a:	bb 27       	eor	r27, r27
     d8c:	66 27       	eor	r22, r22
     d8e:	77 27       	eor	r23, r23
     d90:	cb 01       	movw	r24, r22
     d92:	97 f9       	bld	r25, 7
     d94:	08 95       	ret

00000d96 <__gesf2>:
     d96:	0e 94 56 06 	call	0xcac	; 0xcac <__fp_cmp>
     d9a:	08 f4       	brcc	.+2      	; 0xd9e <__gesf2+0x8>
     d9c:	8f ef       	ldi	r24, 0xFF	; 255
     d9e:	08 95       	ret

00000da0 <__mulsf3>:
     da0:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__mulsf3x>
     da4:	0c 94 91 06 	jmp	0xd22	; 0xd22 <__fp_round>
     da8:	0e 94 83 06 	call	0xd06	; 0xd06 <__fp_pscA>
     dac:	38 f0       	brcs	.+14     	; 0xdbc <__mulsf3+0x1c>
     dae:	0e 94 8a 06 	call	0xd14	; 0xd14 <__fp_pscB>
     db2:	20 f0       	brcs	.+8      	; 0xdbc <__mulsf3+0x1c>
     db4:	95 23       	and	r25, r21
     db6:	11 f0       	breq	.+4      	; 0xdbc <__mulsf3+0x1c>
     db8:	0c 94 7a 06 	jmp	0xcf4	; 0xcf4 <__fp_inf>
     dbc:	0c 94 80 06 	jmp	0xd00	; 0xd00 <__fp_nan>
     dc0:	11 24       	eor	r1, r1
     dc2:	0c 94 c5 06 	jmp	0xd8a	; 0xd8a <__fp_szero>

00000dc6 <__mulsf3x>:
     dc6:	0e 94 a2 06 	call	0xd44	; 0xd44 <__fp_split3>
     dca:	70 f3       	brcs	.-36     	; 0xda8 <__mulsf3+0x8>

00000dcc <__mulsf3_pse>:
     dcc:	95 9f       	mul	r25, r21
     dce:	c1 f3       	breq	.-16     	; 0xdc0 <__mulsf3+0x20>
     dd0:	95 0f       	add	r25, r21
     dd2:	50 e0       	ldi	r21, 0x00	; 0
     dd4:	55 1f       	adc	r21, r21
     dd6:	62 9f       	mul	r22, r18
     dd8:	f0 01       	movw	r30, r0
     dda:	72 9f       	mul	r23, r18
     ddc:	bb 27       	eor	r27, r27
     dde:	f0 0d       	add	r31, r0
     de0:	b1 1d       	adc	r27, r1
     de2:	63 9f       	mul	r22, r19
     de4:	aa 27       	eor	r26, r26
     de6:	f0 0d       	add	r31, r0
     de8:	b1 1d       	adc	r27, r1
     dea:	aa 1f       	adc	r26, r26
     dec:	64 9f       	mul	r22, r20
     dee:	66 27       	eor	r22, r22
     df0:	b0 0d       	add	r27, r0
     df2:	a1 1d       	adc	r26, r1
     df4:	66 1f       	adc	r22, r22
     df6:	82 9f       	mul	r24, r18
     df8:	22 27       	eor	r18, r18
     dfa:	b0 0d       	add	r27, r0
     dfc:	a1 1d       	adc	r26, r1
     dfe:	62 1f       	adc	r22, r18
     e00:	73 9f       	mul	r23, r19
     e02:	b0 0d       	add	r27, r0
     e04:	a1 1d       	adc	r26, r1
     e06:	62 1f       	adc	r22, r18
     e08:	83 9f       	mul	r24, r19
     e0a:	a0 0d       	add	r26, r0
     e0c:	61 1d       	adc	r22, r1
     e0e:	22 1f       	adc	r18, r18
     e10:	74 9f       	mul	r23, r20
     e12:	33 27       	eor	r19, r19
     e14:	a0 0d       	add	r26, r0
     e16:	61 1d       	adc	r22, r1
     e18:	23 1f       	adc	r18, r19
     e1a:	84 9f       	mul	r24, r20
     e1c:	60 0d       	add	r22, r0
     e1e:	21 1d       	adc	r18, r1
     e20:	82 2f       	mov	r24, r18
     e22:	76 2f       	mov	r23, r22
     e24:	6a 2f       	mov	r22, r26
     e26:	11 24       	eor	r1, r1
     e28:	9f 57       	subi	r25, 0x7F	; 127
     e2a:	50 40       	sbci	r21, 0x00	; 0
     e2c:	9a f0       	brmi	.+38     	; 0xe54 <__mulsf3_pse+0x88>
     e2e:	f1 f0       	breq	.+60     	; 0xe6c <__mulsf3_pse+0xa0>
     e30:	88 23       	and	r24, r24
     e32:	4a f0       	brmi	.+18     	; 0xe46 <__mulsf3_pse+0x7a>
     e34:	ee 0f       	add	r30, r30
     e36:	ff 1f       	adc	r31, r31
     e38:	bb 1f       	adc	r27, r27
     e3a:	66 1f       	adc	r22, r22
     e3c:	77 1f       	adc	r23, r23
     e3e:	88 1f       	adc	r24, r24
     e40:	91 50       	subi	r25, 0x01	; 1
     e42:	50 40       	sbci	r21, 0x00	; 0
     e44:	a9 f7       	brne	.-22     	; 0xe30 <__mulsf3_pse+0x64>
     e46:	9e 3f       	cpi	r25, 0xFE	; 254
     e48:	51 05       	cpc	r21, r1
     e4a:	80 f0       	brcs	.+32     	; 0xe6c <__mulsf3_pse+0xa0>
     e4c:	0c 94 7a 06 	jmp	0xcf4	; 0xcf4 <__fp_inf>
     e50:	0c 94 c5 06 	jmp	0xd8a	; 0xd8a <__fp_szero>
     e54:	5f 3f       	cpi	r21, 0xFF	; 255
     e56:	e4 f3       	brlt	.-8      	; 0xe50 <__mulsf3_pse+0x84>
     e58:	98 3e       	cpi	r25, 0xE8	; 232
     e5a:	d4 f3       	brlt	.-12     	; 0xe50 <__mulsf3_pse+0x84>
     e5c:	86 95       	lsr	r24
     e5e:	77 95       	ror	r23
     e60:	67 95       	ror	r22
     e62:	b7 95       	ror	r27
     e64:	f7 95       	ror	r31
     e66:	e7 95       	ror	r30
     e68:	9f 5f       	subi	r25, 0xFF	; 255
     e6a:	c1 f7       	brne	.-16     	; 0xe5c <__mulsf3_pse+0x90>
     e6c:	fe 2b       	or	r31, r30
     e6e:	88 0f       	add	r24, r24
     e70:	91 1d       	adc	r25, r1
     e72:	96 95       	lsr	r25
     e74:	87 95       	ror	r24
     e76:	97 f9       	bld	r25, 7
     e78:	08 95       	ret

00000e7a <__udivmodsi4>:
     e7a:	a1 e2       	ldi	r26, 0x21	; 33
     e7c:	1a 2e       	mov	r1, r26
     e7e:	aa 1b       	sub	r26, r26
     e80:	bb 1b       	sub	r27, r27
     e82:	fd 01       	movw	r30, r26
     e84:	0d c0       	rjmp	.+26     	; 0xea0 <__udivmodsi4_ep>

00000e86 <__udivmodsi4_loop>:
     e86:	aa 1f       	adc	r26, r26
     e88:	bb 1f       	adc	r27, r27
     e8a:	ee 1f       	adc	r30, r30
     e8c:	ff 1f       	adc	r31, r31
     e8e:	a2 17       	cp	r26, r18
     e90:	b3 07       	cpc	r27, r19
     e92:	e4 07       	cpc	r30, r20
     e94:	f5 07       	cpc	r31, r21
     e96:	20 f0       	brcs	.+8      	; 0xea0 <__udivmodsi4_ep>
     e98:	a2 1b       	sub	r26, r18
     e9a:	b3 0b       	sbc	r27, r19
     e9c:	e4 0b       	sbc	r30, r20
     e9e:	f5 0b       	sbc	r31, r21

00000ea0 <__udivmodsi4_ep>:
     ea0:	66 1f       	adc	r22, r22
     ea2:	77 1f       	adc	r23, r23
     ea4:	88 1f       	adc	r24, r24
     ea6:	99 1f       	adc	r25, r25
     ea8:	1a 94       	dec	r1
     eaa:	69 f7       	brne	.-38     	; 0xe86 <__udivmodsi4_loop>
     eac:	60 95       	com	r22
     eae:	70 95       	com	r23
     eb0:	80 95       	com	r24
     eb2:	90 95       	com	r25
     eb4:	9b 01       	movw	r18, r22
     eb6:	ac 01       	movw	r20, r24
     eb8:	bd 01       	movw	r22, r26
     eba:	cf 01       	movw	r24, r30
     ebc:	08 95       	ret

00000ebe <__itoa_ncheck>:
     ebe:	bb 27       	eor	r27, r27
     ec0:	4a 30       	cpi	r20, 0x0A	; 10
     ec2:	31 f4       	brne	.+12     	; 0xed0 <__itoa_ncheck+0x12>
     ec4:	99 23       	and	r25, r25
     ec6:	22 f4       	brpl	.+8      	; 0xed0 <__itoa_ncheck+0x12>
     ec8:	bd e2       	ldi	r27, 0x2D	; 45
     eca:	90 95       	com	r25
     ecc:	81 95       	neg	r24
     ece:	9f 4f       	sbci	r25, 0xFF	; 255
     ed0:	0c 94 6b 07 	jmp	0xed6	; 0xed6 <__utoa_common>

00000ed4 <__utoa_ncheck>:
     ed4:	bb 27       	eor	r27, r27

00000ed6 <__utoa_common>:
     ed6:	fb 01       	movw	r30, r22
     ed8:	55 27       	eor	r21, r21
     eda:	aa 27       	eor	r26, r26
     edc:	88 0f       	add	r24, r24
     ede:	99 1f       	adc	r25, r25
     ee0:	aa 1f       	adc	r26, r26
     ee2:	a4 17       	cp	r26, r20
     ee4:	10 f0       	brcs	.+4      	; 0xeea <__utoa_common+0x14>
     ee6:	a4 1b       	sub	r26, r20
     ee8:	83 95       	inc	r24
     eea:	50 51       	subi	r21, 0x10	; 16
     eec:	b9 f7       	brne	.-18     	; 0xedc <__utoa_common+0x6>
     eee:	a0 5d       	subi	r26, 0xD0	; 208
     ef0:	aa 33       	cpi	r26, 0x3A	; 58
     ef2:	08 f0       	brcs	.+2      	; 0xef6 <__utoa_common+0x20>
     ef4:	a9 5d       	subi	r26, 0xD9	; 217
     ef6:	a1 93       	st	Z+, r26
     ef8:	00 97       	sbiw	r24, 0x00	; 0
     efa:	79 f7       	brne	.-34     	; 0xeda <__utoa_common+0x4>
     efc:	b1 11       	cpse	r27, r1
     efe:	b1 93       	st	Z+, r27
     f00:	11 92       	st	Z+, r1
     f02:	cb 01       	movw	r24, r22
     f04:	0c 94 91 09 	jmp	0x1322	; 0x1322 <strrev>

00000f08 <printf>:
     f08:	a0 e0       	ldi	r26, 0x00	; 0
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	ea e8       	ldi	r30, 0x8A	; 138
     f0e:	f7 e0       	ldi	r31, 0x07	; 7
     f10:	0c 94 4b 0a 	jmp	0x1496	; 0x1496 <__prologue_saves__+0x20>
     f14:	ae 01       	movw	r20, r28
     f16:	4b 5f       	subi	r20, 0xFB	; 251
     f18:	5f 4f       	sbci	r21, 0xFF	; 255
     f1a:	fa 01       	movw	r30, r20
     f1c:	61 91       	ld	r22, Z+
     f1e:	71 91       	ld	r23, Z+
     f20:	af 01       	movw	r20, r30
     f22:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <__iob+0x2>
     f26:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <__iob+0x3>
     f2a:	0e 94 9a 07 	call	0xf34	; 0xf34 <vfprintf>
     f2e:	e2 e0       	ldi	r30, 0x02	; 2
     f30:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <__epilogue_restores__+0x20>

00000f34 <vfprintf>:
     f34:	ab e0       	ldi	r26, 0x0B	; 11
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	e0 ea       	ldi	r30, 0xA0	; 160
     f3a:	f7 e0       	ldi	r31, 0x07	; 7
     f3c:	0c 94 3b 0a 	jmp	0x1476	; 0x1476 <__prologue_saves__>
     f40:	6c 01       	movw	r12, r24
     f42:	7b 01       	movw	r14, r22
     f44:	8a 01       	movw	r16, r20
     f46:	fc 01       	movw	r30, r24
     f48:	17 82       	std	Z+7, r1	; 0x07
     f4a:	16 82       	std	Z+6, r1	; 0x06
     f4c:	83 81       	ldd	r24, Z+3	; 0x03
     f4e:	81 ff       	sbrs	r24, 1
     f50:	cc c1       	rjmp	.+920    	; 0x12ea <vfprintf+0x3b6>
     f52:	ce 01       	movw	r24, r28
     f54:	01 96       	adiw	r24, 0x01	; 1
     f56:	3c 01       	movw	r6, r24
     f58:	f6 01       	movw	r30, r12
     f5a:	93 81       	ldd	r25, Z+3	; 0x03
     f5c:	f7 01       	movw	r30, r14
     f5e:	93 fd       	sbrc	r25, 3
     f60:	85 91       	lpm	r24, Z+
     f62:	93 ff       	sbrs	r25, 3
     f64:	81 91       	ld	r24, Z+
     f66:	7f 01       	movw	r14, r30
     f68:	88 23       	and	r24, r24
     f6a:	09 f4       	brne	.+2      	; 0xf6e <vfprintf+0x3a>
     f6c:	ba c1       	rjmp	.+884    	; 0x12e2 <vfprintf+0x3ae>
     f6e:	85 32       	cpi	r24, 0x25	; 37
     f70:	39 f4       	brne	.+14     	; 0xf80 <vfprintf+0x4c>
     f72:	93 fd       	sbrc	r25, 3
     f74:	85 91       	lpm	r24, Z+
     f76:	93 ff       	sbrs	r25, 3
     f78:	81 91       	ld	r24, Z+
     f7a:	7f 01       	movw	r14, r30
     f7c:	85 32       	cpi	r24, 0x25	; 37
     f7e:	29 f4       	brne	.+10     	; 0xf8a <vfprintf+0x56>
     f80:	b6 01       	movw	r22, r12
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	0e 94 a1 09 	call	0x1342	; 0x1342 <fputc>
     f88:	e7 cf       	rjmp	.-50     	; 0xf58 <vfprintf+0x24>
     f8a:	91 2c       	mov	r9, r1
     f8c:	21 2c       	mov	r2, r1
     f8e:	31 2c       	mov	r3, r1
     f90:	ff e1       	ldi	r31, 0x1F	; 31
     f92:	f3 15       	cp	r31, r3
     f94:	d8 f0       	brcs	.+54     	; 0xfcc <vfprintf+0x98>
     f96:	8b 32       	cpi	r24, 0x2B	; 43
     f98:	79 f0       	breq	.+30     	; 0xfb8 <vfprintf+0x84>
     f9a:	38 f4       	brcc	.+14     	; 0xfaa <vfprintf+0x76>
     f9c:	80 32       	cpi	r24, 0x20	; 32
     f9e:	79 f0       	breq	.+30     	; 0xfbe <vfprintf+0x8a>
     fa0:	83 32       	cpi	r24, 0x23	; 35
     fa2:	a1 f4       	brne	.+40     	; 0xfcc <vfprintf+0x98>
     fa4:	23 2d       	mov	r18, r3
     fa6:	20 61       	ori	r18, 0x10	; 16
     fa8:	1d c0       	rjmp	.+58     	; 0xfe4 <vfprintf+0xb0>
     faa:	8d 32       	cpi	r24, 0x2D	; 45
     fac:	61 f0       	breq	.+24     	; 0xfc6 <vfprintf+0x92>
     fae:	80 33       	cpi	r24, 0x30	; 48
     fb0:	69 f4       	brne	.+26     	; 0xfcc <vfprintf+0x98>
     fb2:	23 2d       	mov	r18, r3
     fb4:	21 60       	ori	r18, 0x01	; 1
     fb6:	16 c0       	rjmp	.+44     	; 0xfe4 <vfprintf+0xb0>
     fb8:	83 2d       	mov	r24, r3
     fba:	82 60       	ori	r24, 0x02	; 2
     fbc:	38 2e       	mov	r3, r24
     fbe:	e3 2d       	mov	r30, r3
     fc0:	e4 60       	ori	r30, 0x04	; 4
     fc2:	3e 2e       	mov	r3, r30
     fc4:	2a c0       	rjmp	.+84     	; 0x101a <vfprintf+0xe6>
     fc6:	f3 2d       	mov	r31, r3
     fc8:	f8 60       	ori	r31, 0x08	; 8
     fca:	1d c0       	rjmp	.+58     	; 0x1006 <vfprintf+0xd2>
     fcc:	37 fc       	sbrc	r3, 7
     fce:	2d c0       	rjmp	.+90     	; 0x102a <vfprintf+0xf6>
     fd0:	20 ed       	ldi	r18, 0xD0	; 208
     fd2:	28 0f       	add	r18, r24
     fd4:	2a 30       	cpi	r18, 0x0A	; 10
     fd6:	40 f0       	brcs	.+16     	; 0xfe8 <vfprintf+0xb4>
     fd8:	8e 32       	cpi	r24, 0x2E	; 46
     fda:	b9 f4       	brne	.+46     	; 0x100a <vfprintf+0xd6>
     fdc:	36 fc       	sbrc	r3, 6
     fde:	81 c1       	rjmp	.+770    	; 0x12e2 <vfprintf+0x3ae>
     fe0:	23 2d       	mov	r18, r3
     fe2:	20 64       	ori	r18, 0x40	; 64
     fe4:	32 2e       	mov	r3, r18
     fe6:	19 c0       	rjmp	.+50     	; 0x101a <vfprintf+0xe6>
     fe8:	36 fe       	sbrs	r3, 6
     fea:	06 c0       	rjmp	.+12     	; 0xff8 <vfprintf+0xc4>
     fec:	8a e0       	ldi	r24, 0x0A	; 10
     fee:	98 9e       	mul	r9, r24
     ff0:	20 0d       	add	r18, r0
     ff2:	11 24       	eor	r1, r1
     ff4:	92 2e       	mov	r9, r18
     ff6:	11 c0       	rjmp	.+34     	; 0x101a <vfprintf+0xe6>
     ff8:	ea e0       	ldi	r30, 0x0A	; 10
     ffa:	2e 9e       	mul	r2, r30
     ffc:	20 0d       	add	r18, r0
     ffe:	11 24       	eor	r1, r1
    1000:	22 2e       	mov	r2, r18
    1002:	f3 2d       	mov	r31, r3
    1004:	f0 62       	ori	r31, 0x20	; 32
    1006:	3f 2e       	mov	r3, r31
    1008:	08 c0       	rjmp	.+16     	; 0x101a <vfprintf+0xe6>
    100a:	8c 36       	cpi	r24, 0x6C	; 108
    100c:	21 f4       	brne	.+8      	; 0x1016 <vfprintf+0xe2>
    100e:	83 2d       	mov	r24, r3
    1010:	80 68       	ori	r24, 0x80	; 128
    1012:	38 2e       	mov	r3, r24
    1014:	02 c0       	rjmp	.+4      	; 0x101a <vfprintf+0xe6>
    1016:	88 36       	cpi	r24, 0x68	; 104
    1018:	41 f4       	brne	.+16     	; 0x102a <vfprintf+0xf6>
    101a:	f7 01       	movw	r30, r14
    101c:	93 fd       	sbrc	r25, 3
    101e:	85 91       	lpm	r24, Z+
    1020:	93 ff       	sbrs	r25, 3
    1022:	81 91       	ld	r24, Z+
    1024:	7f 01       	movw	r14, r30
    1026:	81 11       	cpse	r24, r1
    1028:	b3 cf       	rjmp	.-154    	; 0xf90 <vfprintf+0x5c>
    102a:	98 2f       	mov	r25, r24
    102c:	9f 7d       	andi	r25, 0xDF	; 223
    102e:	95 54       	subi	r25, 0x45	; 69
    1030:	93 30       	cpi	r25, 0x03	; 3
    1032:	28 f4       	brcc	.+10     	; 0x103e <vfprintf+0x10a>
    1034:	0c 5f       	subi	r16, 0xFC	; 252
    1036:	1f 4f       	sbci	r17, 0xFF	; 255
    1038:	9f e3       	ldi	r25, 0x3F	; 63
    103a:	99 83       	std	Y+1, r25	; 0x01
    103c:	0d c0       	rjmp	.+26     	; 0x1058 <vfprintf+0x124>
    103e:	83 36       	cpi	r24, 0x63	; 99
    1040:	31 f0       	breq	.+12     	; 0x104e <vfprintf+0x11a>
    1042:	83 37       	cpi	r24, 0x73	; 115
    1044:	71 f0       	breq	.+28     	; 0x1062 <vfprintf+0x12e>
    1046:	83 35       	cpi	r24, 0x53	; 83
    1048:	09 f0       	breq	.+2      	; 0x104c <vfprintf+0x118>
    104a:	59 c0       	rjmp	.+178    	; 0x10fe <vfprintf+0x1ca>
    104c:	21 c0       	rjmp	.+66     	; 0x1090 <vfprintf+0x15c>
    104e:	f8 01       	movw	r30, r16
    1050:	80 81       	ld	r24, Z
    1052:	89 83       	std	Y+1, r24	; 0x01
    1054:	0e 5f       	subi	r16, 0xFE	; 254
    1056:	1f 4f       	sbci	r17, 0xFF	; 255
    1058:	88 24       	eor	r8, r8
    105a:	83 94       	inc	r8
    105c:	91 2c       	mov	r9, r1
    105e:	53 01       	movw	r10, r6
    1060:	13 c0       	rjmp	.+38     	; 0x1088 <vfprintf+0x154>
    1062:	28 01       	movw	r4, r16
    1064:	f2 e0       	ldi	r31, 0x02	; 2
    1066:	4f 0e       	add	r4, r31
    1068:	51 1c       	adc	r5, r1
    106a:	f8 01       	movw	r30, r16
    106c:	a0 80       	ld	r10, Z
    106e:	b1 80       	ldd	r11, Z+1	; 0x01
    1070:	36 fe       	sbrs	r3, 6
    1072:	03 c0       	rjmp	.+6      	; 0x107a <vfprintf+0x146>
    1074:	69 2d       	mov	r22, r9
    1076:	70 e0       	ldi	r23, 0x00	; 0
    1078:	02 c0       	rjmp	.+4      	; 0x107e <vfprintf+0x14a>
    107a:	6f ef       	ldi	r22, 0xFF	; 255
    107c:	7f ef       	ldi	r23, 0xFF	; 255
    107e:	c5 01       	movw	r24, r10
    1080:	0e 94 86 09 	call	0x130c	; 0x130c <strnlen>
    1084:	4c 01       	movw	r8, r24
    1086:	82 01       	movw	r16, r4
    1088:	f3 2d       	mov	r31, r3
    108a:	ff 77       	andi	r31, 0x7F	; 127
    108c:	3f 2e       	mov	r3, r31
    108e:	16 c0       	rjmp	.+44     	; 0x10bc <vfprintf+0x188>
    1090:	28 01       	movw	r4, r16
    1092:	22 e0       	ldi	r18, 0x02	; 2
    1094:	42 0e       	add	r4, r18
    1096:	51 1c       	adc	r5, r1
    1098:	f8 01       	movw	r30, r16
    109a:	a0 80       	ld	r10, Z
    109c:	b1 80       	ldd	r11, Z+1	; 0x01
    109e:	36 fe       	sbrs	r3, 6
    10a0:	03 c0       	rjmp	.+6      	; 0x10a8 <vfprintf+0x174>
    10a2:	69 2d       	mov	r22, r9
    10a4:	70 e0       	ldi	r23, 0x00	; 0
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <vfprintf+0x178>
    10a8:	6f ef       	ldi	r22, 0xFF	; 255
    10aa:	7f ef       	ldi	r23, 0xFF	; 255
    10ac:	c5 01       	movw	r24, r10
    10ae:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <strnlen_P>
    10b2:	4c 01       	movw	r8, r24
    10b4:	f3 2d       	mov	r31, r3
    10b6:	f0 68       	ori	r31, 0x80	; 128
    10b8:	3f 2e       	mov	r3, r31
    10ba:	82 01       	movw	r16, r4
    10bc:	33 fc       	sbrc	r3, 3
    10be:	1b c0       	rjmp	.+54     	; 0x10f6 <vfprintf+0x1c2>
    10c0:	82 2d       	mov	r24, r2
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	88 16       	cp	r8, r24
    10c6:	99 06       	cpc	r9, r25
    10c8:	b0 f4       	brcc	.+44     	; 0x10f6 <vfprintf+0x1c2>
    10ca:	b6 01       	movw	r22, r12
    10cc:	80 e2       	ldi	r24, 0x20	; 32
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	0e 94 a1 09 	call	0x1342	; 0x1342 <fputc>
    10d4:	2a 94       	dec	r2
    10d6:	f4 cf       	rjmp	.-24     	; 0x10c0 <vfprintf+0x18c>
    10d8:	f5 01       	movw	r30, r10
    10da:	37 fc       	sbrc	r3, 7
    10dc:	85 91       	lpm	r24, Z+
    10de:	37 fe       	sbrs	r3, 7
    10e0:	81 91       	ld	r24, Z+
    10e2:	5f 01       	movw	r10, r30
    10e4:	b6 01       	movw	r22, r12
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	0e 94 a1 09 	call	0x1342	; 0x1342 <fputc>
    10ec:	21 10       	cpse	r2, r1
    10ee:	2a 94       	dec	r2
    10f0:	21 e0       	ldi	r18, 0x01	; 1
    10f2:	82 1a       	sub	r8, r18
    10f4:	91 08       	sbc	r9, r1
    10f6:	81 14       	cp	r8, r1
    10f8:	91 04       	cpc	r9, r1
    10fa:	71 f7       	brne	.-36     	; 0x10d8 <vfprintf+0x1a4>
    10fc:	e8 c0       	rjmp	.+464    	; 0x12ce <vfprintf+0x39a>
    10fe:	84 36       	cpi	r24, 0x64	; 100
    1100:	11 f0       	breq	.+4      	; 0x1106 <vfprintf+0x1d2>
    1102:	89 36       	cpi	r24, 0x69	; 105
    1104:	41 f5       	brne	.+80     	; 0x1156 <vfprintf+0x222>
    1106:	f8 01       	movw	r30, r16
    1108:	37 fe       	sbrs	r3, 7
    110a:	07 c0       	rjmp	.+14     	; 0x111a <vfprintf+0x1e6>
    110c:	60 81       	ld	r22, Z
    110e:	71 81       	ldd	r23, Z+1	; 0x01
    1110:	82 81       	ldd	r24, Z+2	; 0x02
    1112:	93 81       	ldd	r25, Z+3	; 0x03
    1114:	0c 5f       	subi	r16, 0xFC	; 252
    1116:	1f 4f       	sbci	r17, 0xFF	; 255
    1118:	08 c0       	rjmp	.+16     	; 0x112a <vfprintf+0x1f6>
    111a:	60 81       	ld	r22, Z
    111c:	71 81       	ldd	r23, Z+1	; 0x01
    111e:	07 2e       	mov	r0, r23
    1120:	00 0c       	add	r0, r0
    1122:	88 0b       	sbc	r24, r24
    1124:	99 0b       	sbc	r25, r25
    1126:	0e 5f       	subi	r16, 0xFE	; 254
    1128:	1f 4f       	sbci	r17, 0xFF	; 255
    112a:	f3 2d       	mov	r31, r3
    112c:	ff 76       	andi	r31, 0x6F	; 111
    112e:	3f 2e       	mov	r3, r31
    1130:	97 ff       	sbrs	r25, 7
    1132:	09 c0       	rjmp	.+18     	; 0x1146 <vfprintf+0x212>
    1134:	90 95       	com	r25
    1136:	80 95       	com	r24
    1138:	70 95       	com	r23
    113a:	61 95       	neg	r22
    113c:	7f 4f       	sbci	r23, 0xFF	; 255
    113e:	8f 4f       	sbci	r24, 0xFF	; 255
    1140:	9f 4f       	sbci	r25, 0xFF	; 255
    1142:	f0 68       	ori	r31, 0x80	; 128
    1144:	3f 2e       	mov	r3, r31
    1146:	2a e0       	ldi	r18, 0x0A	; 10
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	a3 01       	movw	r20, r6
    114c:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__ultoa_invert>
    1150:	88 2e       	mov	r8, r24
    1152:	86 18       	sub	r8, r6
    1154:	45 c0       	rjmp	.+138    	; 0x11e0 <vfprintf+0x2ac>
    1156:	85 37       	cpi	r24, 0x75	; 117
    1158:	31 f4       	brne	.+12     	; 0x1166 <vfprintf+0x232>
    115a:	23 2d       	mov	r18, r3
    115c:	2f 7e       	andi	r18, 0xEF	; 239
    115e:	b2 2e       	mov	r11, r18
    1160:	2a e0       	ldi	r18, 0x0A	; 10
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	25 c0       	rjmp	.+74     	; 0x11b0 <vfprintf+0x27c>
    1166:	93 2d       	mov	r25, r3
    1168:	99 7f       	andi	r25, 0xF9	; 249
    116a:	b9 2e       	mov	r11, r25
    116c:	8f 36       	cpi	r24, 0x6F	; 111
    116e:	c1 f0       	breq	.+48     	; 0x11a0 <vfprintf+0x26c>
    1170:	18 f4       	brcc	.+6      	; 0x1178 <vfprintf+0x244>
    1172:	88 35       	cpi	r24, 0x58	; 88
    1174:	79 f0       	breq	.+30     	; 0x1194 <vfprintf+0x260>
    1176:	b5 c0       	rjmp	.+362    	; 0x12e2 <vfprintf+0x3ae>
    1178:	80 37       	cpi	r24, 0x70	; 112
    117a:	19 f0       	breq	.+6      	; 0x1182 <vfprintf+0x24e>
    117c:	88 37       	cpi	r24, 0x78	; 120
    117e:	21 f0       	breq	.+8      	; 0x1188 <vfprintf+0x254>
    1180:	b0 c0       	rjmp	.+352    	; 0x12e2 <vfprintf+0x3ae>
    1182:	e9 2f       	mov	r30, r25
    1184:	e0 61       	ori	r30, 0x10	; 16
    1186:	be 2e       	mov	r11, r30
    1188:	b4 fe       	sbrs	r11, 4
    118a:	0d c0       	rjmp	.+26     	; 0x11a6 <vfprintf+0x272>
    118c:	fb 2d       	mov	r31, r11
    118e:	f4 60       	ori	r31, 0x04	; 4
    1190:	bf 2e       	mov	r11, r31
    1192:	09 c0       	rjmp	.+18     	; 0x11a6 <vfprintf+0x272>
    1194:	34 fe       	sbrs	r3, 4
    1196:	0a c0       	rjmp	.+20     	; 0x11ac <vfprintf+0x278>
    1198:	29 2f       	mov	r18, r25
    119a:	26 60       	ori	r18, 0x06	; 6
    119c:	b2 2e       	mov	r11, r18
    119e:	06 c0       	rjmp	.+12     	; 0x11ac <vfprintf+0x278>
    11a0:	28 e0       	ldi	r18, 0x08	; 8
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	05 c0       	rjmp	.+10     	; 0x11b0 <vfprintf+0x27c>
    11a6:	20 e1       	ldi	r18, 0x10	; 16
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <vfprintf+0x27c>
    11ac:	20 e1       	ldi	r18, 0x10	; 16
    11ae:	32 e0       	ldi	r19, 0x02	; 2
    11b0:	f8 01       	movw	r30, r16
    11b2:	b7 fe       	sbrs	r11, 7
    11b4:	07 c0       	rjmp	.+14     	; 0x11c4 <vfprintf+0x290>
    11b6:	60 81       	ld	r22, Z
    11b8:	71 81       	ldd	r23, Z+1	; 0x01
    11ba:	82 81       	ldd	r24, Z+2	; 0x02
    11bc:	93 81       	ldd	r25, Z+3	; 0x03
    11be:	0c 5f       	subi	r16, 0xFC	; 252
    11c0:	1f 4f       	sbci	r17, 0xFF	; 255
    11c2:	06 c0       	rjmp	.+12     	; 0x11d0 <vfprintf+0x29c>
    11c4:	60 81       	ld	r22, Z
    11c6:	71 81       	ldd	r23, Z+1	; 0x01
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	0e 5f       	subi	r16, 0xFE	; 254
    11ce:	1f 4f       	sbci	r17, 0xFF	; 255
    11d0:	a3 01       	movw	r20, r6
    11d2:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__ultoa_invert>
    11d6:	88 2e       	mov	r8, r24
    11d8:	86 18       	sub	r8, r6
    11da:	fb 2d       	mov	r31, r11
    11dc:	ff 77       	andi	r31, 0x7F	; 127
    11de:	3f 2e       	mov	r3, r31
    11e0:	36 fe       	sbrs	r3, 6
    11e2:	0d c0       	rjmp	.+26     	; 0x11fe <vfprintf+0x2ca>
    11e4:	23 2d       	mov	r18, r3
    11e6:	2e 7f       	andi	r18, 0xFE	; 254
    11e8:	a2 2e       	mov	r10, r18
    11ea:	89 14       	cp	r8, r9
    11ec:	58 f4       	brcc	.+22     	; 0x1204 <vfprintf+0x2d0>
    11ee:	34 fe       	sbrs	r3, 4
    11f0:	0b c0       	rjmp	.+22     	; 0x1208 <vfprintf+0x2d4>
    11f2:	32 fc       	sbrc	r3, 2
    11f4:	09 c0       	rjmp	.+18     	; 0x1208 <vfprintf+0x2d4>
    11f6:	83 2d       	mov	r24, r3
    11f8:	8e 7e       	andi	r24, 0xEE	; 238
    11fa:	a8 2e       	mov	r10, r24
    11fc:	05 c0       	rjmp	.+10     	; 0x1208 <vfprintf+0x2d4>
    11fe:	b8 2c       	mov	r11, r8
    1200:	a3 2c       	mov	r10, r3
    1202:	03 c0       	rjmp	.+6      	; 0x120a <vfprintf+0x2d6>
    1204:	b8 2c       	mov	r11, r8
    1206:	01 c0       	rjmp	.+2      	; 0x120a <vfprintf+0x2d6>
    1208:	b9 2c       	mov	r11, r9
    120a:	a4 fe       	sbrs	r10, 4
    120c:	0f c0       	rjmp	.+30     	; 0x122c <vfprintf+0x2f8>
    120e:	fe 01       	movw	r30, r28
    1210:	e8 0d       	add	r30, r8
    1212:	f1 1d       	adc	r31, r1
    1214:	80 81       	ld	r24, Z
    1216:	80 33       	cpi	r24, 0x30	; 48
    1218:	21 f4       	brne	.+8      	; 0x1222 <vfprintf+0x2ee>
    121a:	9a 2d       	mov	r25, r10
    121c:	99 7e       	andi	r25, 0xE9	; 233
    121e:	a9 2e       	mov	r10, r25
    1220:	09 c0       	rjmp	.+18     	; 0x1234 <vfprintf+0x300>
    1222:	a2 fe       	sbrs	r10, 2
    1224:	06 c0       	rjmp	.+12     	; 0x1232 <vfprintf+0x2fe>
    1226:	b3 94       	inc	r11
    1228:	b3 94       	inc	r11
    122a:	04 c0       	rjmp	.+8      	; 0x1234 <vfprintf+0x300>
    122c:	8a 2d       	mov	r24, r10
    122e:	86 78       	andi	r24, 0x86	; 134
    1230:	09 f0       	breq	.+2      	; 0x1234 <vfprintf+0x300>
    1232:	b3 94       	inc	r11
    1234:	a3 fc       	sbrc	r10, 3
    1236:	11 c0       	rjmp	.+34     	; 0x125a <vfprintf+0x326>
    1238:	a0 fe       	sbrs	r10, 0
    123a:	06 c0       	rjmp	.+12     	; 0x1248 <vfprintf+0x314>
    123c:	b2 14       	cp	r11, r2
    123e:	88 f4       	brcc	.+34     	; 0x1262 <vfprintf+0x32e>
    1240:	28 0c       	add	r2, r8
    1242:	92 2c       	mov	r9, r2
    1244:	9b 18       	sub	r9, r11
    1246:	0e c0       	rjmp	.+28     	; 0x1264 <vfprintf+0x330>
    1248:	b2 14       	cp	r11, r2
    124a:	60 f4       	brcc	.+24     	; 0x1264 <vfprintf+0x330>
    124c:	b6 01       	movw	r22, r12
    124e:	80 e2       	ldi	r24, 0x20	; 32
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	0e 94 a1 09 	call	0x1342	; 0x1342 <fputc>
    1256:	b3 94       	inc	r11
    1258:	f7 cf       	rjmp	.-18     	; 0x1248 <vfprintf+0x314>
    125a:	b2 14       	cp	r11, r2
    125c:	18 f4       	brcc	.+6      	; 0x1264 <vfprintf+0x330>
    125e:	2b 18       	sub	r2, r11
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <vfprintf+0x332>
    1262:	98 2c       	mov	r9, r8
    1264:	21 2c       	mov	r2, r1
    1266:	a4 fe       	sbrs	r10, 4
    1268:	10 c0       	rjmp	.+32     	; 0x128a <vfprintf+0x356>
    126a:	b6 01       	movw	r22, r12
    126c:	80 e3       	ldi	r24, 0x30	; 48
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	0e 94 a1 09 	call	0x1342	; 0x1342 <fputc>
    1274:	a2 fe       	sbrs	r10, 2
    1276:	17 c0       	rjmp	.+46     	; 0x12a6 <vfprintf+0x372>
    1278:	a1 fc       	sbrc	r10, 1
    127a:	03 c0       	rjmp	.+6      	; 0x1282 <vfprintf+0x34e>
    127c:	88 e7       	ldi	r24, 0x78	; 120
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <vfprintf+0x352>
    1282:	88 e5       	ldi	r24, 0x58	; 88
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	b6 01       	movw	r22, r12
    1288:	0c c0       	rjmp	.+24     	; 0x12a2 <vfprintf+0x36e>
    128a:	8a 2d       	mov	r24, r10
    128c:	86 78       	andi	r24, 0x86	; 134
    128e:	59 f0       	breq	.+22     	; 0x12a6 <vfprintf+0x372>
    1290:	a1 fe       	sbrs	r10, 1
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <vfprintf+0x364>
    1294:	8b e2       	ldi	r24, 0x2B	; 43
    1296:	01 c0       	rjmp	.+2      	; 0x129a <vfprintf+0x366>
    1298:	80 e2       	ldi	r24, 0x20	; 32
    129a:	a7 fc       	sbrc	r10, 7
    129c:	8d e2       	ldi	r24, 0x2D	; 45
    129e:	b6 01       	movw	r22, r12
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	0e 94 a1 09 	call	0x1342	; 0x1342 <fputc>
    12a6:	89 14       	cp	r8, r9
    12a8:	38 f4       	brcc	.+14     	; 0x12b8 <vfprintf+0x384>
    12aa:	b6 01       	movw	r22, r12
    12ac:	80 e3       	ldi	r24, 0x30	; 48
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	0e 94 a1 09 	call	0x1342	; 0x1342 <fputc>
    12b4:	9a 94       	dec	r9
    12b6:	f7 cf       	rjmp	.-18     	; 0x12a6 <vfprintf+0x372>
    12b8:	8a 94       	dec	r8
    12ba:	f3 01       	movw	r30, r6
    12bc:	e8 0d       	add	r30, r8
    12be:	f1 1d       	adc	r31, r1
    12c0:	80 81       	ld	r24, Z
    12c2:	b6 01       	movw	r22, r12
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	0e 94 a1 09 	call	0x1342	; 0x1342 <fputc>
    12ca:	81 10       	cpse	r8, r1
    12cc:	f5 cf       	rjmp	.-22     	; 0x12b8 <vfprintf+0x384>
    12ce:	22 20       	and	r2, r2
    12d0:	09 f4       	brne	.+2      	; 0x12d4 <vfprintf+0x3a0>
    12d2:	42 ce       	rjmp	.-892    	; 0xf58 <vfprintf+0x24>
    12d4:	b6 01       	movw	r22, r12
    12d6:	80 e2       	ldi	r24, 0x20	; 32
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	0e 94 a1 09 	call	0x1342	; 0x1342 <fputc>
    12de:	2a 94       	dec	r2
    12e0:	f6 cf       	rjmp	.-20     	; 0x12ce <vfprintf+0x39a>
    12e2:	f6 01       	movw	r30, r12
    12e4:	86 81       	ldd	r24, Z+6	; 0x06
    12e6:	97 81       	ldd	r25, Z+7	; 0x07
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <vfprintf+0x3ba>
    12ea:	8f ef       	ldi	r24, 0xFF	; 255
    12ec:	9f ef       	ldi	r25, 0xFF	; 255
    12ee:	2b 96       	adiw	r28, 0x0b	; 11
    12f0:	e2 e1       	ldi	r30, 0x12	; 18
    12f2:	0c 94 57 0a 	jmp	0x14ae	; 0x14ae <__epilogue_restores__>

000012f6 <strnlen_P>:
    12f6:	fc 01       	movw	r30, r24
    12f8:	05 90       	lpm	r0, Z+
    12fa:	61 50       	subi	r22, 0x01	; 1
    12fc:	70 40       	sbci	r23, 0x00	; 0
    12fe:	01 10       	cpse	r0, r1
    1300:	d8 f7       	brcc	.-10     	; 0x12f8 <strnlen_P+0x2>
    1302:	80 95       	com	r24
    1304:	90 95       	com	r25
    1306:	8e 0f       	add	r24, r30
    1308:	9f 1f       	adc	r25, r31
    130a:	08 95       	ret

0000130c <strnlen>:
    130c:	fc 01       	movw	r30, r24
    130e:	61 50       	subi	r22, 0x01	; 1
    1310:	70 40       	sbci	r23, 0x00	; 0
    1312:	01 90       	ld	r0, Z+
    1314:	01 10       	cpse	r0, r1
    1316:	d8 f7       	brcc	.-10     	; 0x130e <strnlen+0x2>
    1318:	80 95       	com	r24
    131a:	90 95       	com	r25
    131c:	8e 0f       	add	r24, r30
    131e:	9f 1f       	adc	r25, r31
    1320:	08 95       	ret

00001322 <strrev>:
    1322:	dc 01       	movw	r26, r24
    1324:	fc 01       	movw	r30, r24
    1326:	67 2f       	mov	r22, r23
    1328:	71 91       	ld	r23, Z+
    132a:	77 23       	and	r23, r23
    132c:	e1 f7       	brne	.-8      	; 0x1326 <strrev+0x4>
    132e:	32 97       	sbiw	r30, 0x02	; 2
    1330:	04 c0       	rjmp	.+8      	; 0x133a <strrev+0x18>
    1332:	7c 91       	ld	r23, X
    1334:	6d 93       	st	X+, r22
    1336:	70 83       	st	Z, r23
    1338:	62 91       	ld	r22, -Z
    133a:	ae 17       	cp	r26, r30
    133c:	bf 07       	cpc	r27, r31
    133e:	c8 f3       	brcs	.-14     	; 0x1332 <strrev+0x10>
    1340:	08 95       	ret

00001342 <fputc>:
    1342:	0f 93       	push	r16
    1344:	1f 93       	push	r17
    1346:	cf 93       	push	r28
    1348:	df 93       	push	r29
    134a:	fb 01       	movw	r30, r22
    134c:	23 81       	ldd	r18, Z+3	; 0x03
    134e:	21 fd       	sbrc	r18, 1
    1350:	03 c0       	rjmp	.+6      	; 0x1358 <fputc+0x16>
    1352:	8f ef       	ldi	r24, 0xFF	; 255
    1354:	9f ef       	ldi	r25, 0xFF	; 255
    1356:	2c c0       	rjmp	.+88     	; 0x13b0 <fputc+0x6e>
    1358:	22 ff       	sbrs	r18, 2
    135a:	16 c0       	rjmp	.+44     	; 0x1388 <fputc+0x46>
    135c:	46 81       	ldd	r20, Z+6	; 0x06
    135e:	57 81       	ldd	r21, Z+7	; 0x07
    1360:	24 81       	ldd	r18, Z+4	; 0x04
    1362:	35 81       	ldd	r19, Z+5	; 0x05
    1364:	42 17       	cp	r20, r18
    1366:	53 07       	cpc	r21, r19
    1368:	44 f4       	brge	.+16     	; 0x137a <fputc+0x38>
    136a:	a0 81       	ld	r26, Z
    136c:	b1 81       	ldd	r27, Z+1	; 0x01
    136e:	9d 01       	movw	r18, r26
    1370:	2f 5f       	subi	r18, 0xFF	; 255
    1372:	3f 4f       	sbci	r19, 0xFF	; 255
    1374:	31 83       	std	Z+1, r19	; 0x01
    1376:	20 83       	st	Z, r18
    1378:	8c 93       	st	X, r24
    137a:	26 81       	ldd	r18, Z+6	; 0x06
    137c:	37 81       	ldd	r19, Z+7	; 0x07
    137e:	2f 5f       	subi	r18, 0xFF	; 255
    1380:	3f 4f       	sbci	r19, 0xFF	; 255
    1382:	37 83       	std	Z+7, r19	; 0x07
    1384:	26 83       	std	Z+6, r18	; 0x06
    1386:	14 c0       	rjmp	.+40     	; 0x13b0 <fputc+0x6e>
    1388:	8b 01       	movw	r16, r22
    138a:	ec 01       	movw	r28, r24
    138c:	fb 01       	movw	r30, r22
    138e:	00 84       	ldd	r0, Z+8	; 0x08
    1390:	f1 85       	ldd	r31, Z+9	; 0x09
    1392:	e0 2d       	mov	r30, r0
    1394:	09 95       	icall
    1396:	89 2b       	or	r24, r25
    1398:	e1 f6       	brne	.-72     	; 0x1352 <fputc+0x10>
    139a:	d8 01       	movw	r26, r16
    139c:	16 96       	adiw	r26, 0x06	; 6
    139e:	8d 91       	ld	r24, X+
    13a0:	9c 91       	ld	r25, X
    13a2:	17 97       	sbiw	r26, 0x07	; 7
    13a4:	01 96       	adiw	r24, 0x01	; 1
    13a6:	17 96       	adiw	r26, 0x07	; 7
    13a8:	9c 93       	st	X, r25
    13aa:	8e 93       	st	-X, r24
    13ac:	16 97       	sbiw	r26, 0x06	; 6
    13ae:	ce 01       	movw	r24, r28
    13b0:	df 91       	pop	r29
    13b2:	cf 91       	pop	r28
    13b4:	1f 91       	pop	r17
    13b6:	0f 91       	pop	r16
    13b8:	08 95       	ret

000013ba <__ultoa_invert>:
    13ba:	fa 01       	movw	r30, r20
    13bc:	aa 27       	eor	r26, r26
    13be:	28 30       	cpi	r18, 0x08	; 8
    13c0:	51 f1       	breq	.+84     	; 0x1416 <__ultoa_invert+0x5c>
    13c2:	20 31       	cpi	r18, 0x10	; 16
    13c4:	81 f1       	breq	.+96     	; 0x1426 <__ultoa_invert+0x6c>
    13c6:	e8 94       	clt
    13c8:	6f 93       	push	r22
    13ca:	6e 7f       	andi	r22, 0xFE	; 254
    13cc:	6e 5f       	subi	r22, 0xFE	; 254
    13ce:	7f 4f       	sbci	r23, 0xFF	; 255
    13d0:	8f 4f       	sbci	r24, 0xFF	; 255
    13d2:	9f 4f       	sbci	r25, 0xFF	; 255
    13d4:	af 4f       	sbci	r26, 0xFF	; 255
    13d6:	b1 e0       	ldi	r27, 0x01	; 1
    13d8:	3e d0       	rcall	.+124    	; 0x1456 <__ultoa_invert+0x9c>
    13da:	b4 e0       	ldi	r27, 0x04	; 4
    13dc:	3c d0       	rcall	.+120    	; 0x1456 <__ultoa_invert+0x9c>
    13de:	67 0f       	add	r22, r23
    13e0:	78 1f       	adc	r23, r24
    13e2:	89 1f       	adc	r24, r25
    13e4:	9a 1f       	adc	r25, r26
    13e6:	a1 1d       	adc	r26, r1
    13e8:	68 0f       	add	r22, r24
    13ea:	79 1f       	adc	r23, r25
    13ec:	8a 1f       	adc	r24, r26
    13ee:	91 1d       	adc	r25, r1
    13f0:	a1 1d       	adc	r26, r1
    13f2:	6a 0f       	add	r22, r26
    13f4:	71 1d       	adc	r23, r1
    13f6:	81 1d       	adc	r24, r1
    13f8:	91 1d       	adc	r25, r1
    13fa:	a1 1d       	adc	r26, r1
    13fc:	20 d0       	rcall	.+64     	; 0x143e <__ultoa_invert+0x84>
    13fe:	09 f4       	brne	.+2      	; 0x1402 <__ultoa_invert+0x48>
    1400:	68 94       	set
    1402:	3f 91       	pop	r19
    1404:	2a e0       	ldi	r18, 0x0A	; 10
    1406:	26 9f       	mul	r18, r22
    1408:	11 24       	eor	r1, r1
    140a:	30 19       	sub	r19, r0
    140c:	30 5d       	subi	r19, 0xD0	; 208
    140e:	31 93       	st	Z+, r19
    1410:	de f6       	brtc	.-74     	; 0x13c8 <__ultoa_invert+0xe>
    1412:	cf 01       	movw	r24, r30
    1414:	08 95       	ret
    1416:	46 2f       	mov	r20, r22
    1418:	47 70       	andi	r20, 0x07	; 7
    141a:	40 5d       	subi	r20, 0xD0	; 208
    141c:	41 93       	st	Z+, r20
    141e:	b3 e0       	ldi	r27, 0x03	; 3
    1420:	0f d0       	rcall	.+30     	; 0x1440 <__ultoa_invert+0x86>
    1422:	c9 f7       	brne	.-14     	; 0x1416 <__ultoa_invert+0x5c>
    1424:	f6 cf       	rjmp	.-20     	; 0x1412 <__ultoa_invert+0x58>
    1426:	46 2f       	mov	r20, r22
    1428:	4f 70       	andi	r20, 0x0F	; 15
    142a:	40 5d       	subi	r20, 0xD0	; 208
    142c:	4a 33       	cpi	r20, 0x3A	; 58
    142e:	18 f0       	brcs	.+6      	; 0x1436 <__ultoa_invert+0x7c>
    1430:	49 5d       	subi	r20, 0xD9	; 217
    1432:	31 fd       	sbrc	r19, 1
    1434:	40 52       	subi	r20, 0x20	; 32
    1436:	41 93       	st	Z+, r20
    1438:	02 d0       	rcall	.+4      	; 0x143e <__ultoa_invert+0x84>
    143a:	a9 f7       	brne	.-22     	; 0x1426 <__ultoa_invert+0x6c>
    143c:	ea cf       	rjmp	.-44     	; 0x1412 <__ultoa_invert+0x58>
    143e:	b4 e0       	ldi	r27, 0x04	; 4
    1440:	a6 95       	lsr	r26
    1442:	97 95       	ror	r25
    1444:	87 95       	ror	r24
    1446:	77 95       	ror	r23
    1448:	67 95       	ror	r22
    144a:	ba 95       	dec	r27
    144c:	c9 f7       	brne	.-14     	; 0x1440 <__ultoa_invert+0x86>
    144e:	00 97       	sbiw	r24, 0x00	; 0
    1450:	61 05       	cpc	r22, r1
    1452:	71 05       	cpc	r23, r1
    1454:	08 95       	ret
    1456:	9b 01       	movw	r18, r22
    1458:	ac 01       	movw	r20, r24
    145a:	0a 2e       	mov	r0, r26
    145c:	06 94       	lsr	r0
    145e:	57 95       	ror	r21
    1460:	47 95       	ror	r20
    1462:	37 95       	ror	r19
    1464:	27 95       	ror	r18
    1466:	ba 95       	dec	r27
    1468:	c9 f7       	brne	.-14     	; 0x145c <__ultoa_invert+0xa2>
    146a:	62 0f       	add	r22, r18
    146c:	73 1f       	adc	r23, r19
    146e:	84 1f       	adc	r24, r20
    1470:	95 1f       	adc	r25, r21
    1472:	a0 1d       	adc	r26, r0
    1474:	08 95       	ret

00001476 <__prologue_saves__>:
    1476:	2f 92       	push	r2
    1478:	3f 92       	push	r3
    147a:	4f 92       	push	r4
    147c:	5f 92       	push	r5
    147e:	6f 92       	push	r6
    1480:	7f 92       	push	r7
    1482:	8f 92       	push	r8
    1484:	9f 92       	push	r9
    1486:	af 92       	push	r10
    1488:	bf 92       	push	r11
    148a:	cf 92       	push	r12
    148c:	df 92       	push	r13
    148e:	ef 92       	push	r14
    1490:	ff 92       	push	r15
    1492:	0f 93       	push	r16
    1494:	1f 93       	push	r17
    1496:	cf 93       	push	r28
    1498:	df 93       	push	r29
    149a:	cd b7       	in	r28, 0x3d	; 61
    149c:	de b7       	in	r29, 0x3e	; 62
    149e:	ca 1b       	sub	r28, r26
    14a0:	db 0b       	sbc	r29, r27
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	f8 94       	cli
    14a6:	de bf       	out	0x3e, r29	; 62
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	cd bf       	out	0x3d, r28	; 61
    14ac:	09 94       	ijmp

000014ae <__epilogue_restores__>:
    14ae:	2a 88       	ldd	r2, Y+18	; 0x12
    14b0:	39 88       	ldd	r3, Y+17	; 0x11
    14b2:	48 88       	ldd	r4, Y+16	; 0x10
    14b4:	5f 84       	ldd	r5, Y+15	; 0x0f
    14b6:	6e 84       	ldd	r6, Y+14	; 0x0e
    14b8:	7d 84       	ldd	r7, Y+13	; 0x0d
    14ba:	8c 84       	ldd	r8, Y+12	; 0x0c
    14bc:	9b 84       	ldd	r9, Y+11	; 0x0b
    14be:	aa 84       	ldd	r10, Y+10	; 0x0a
    14c0:	b9 84       	ldd	r11, Y+9	; 0x09
    14c2:	c8 84       	ldd	r12, Y+8	; 0x08
    14c4:	df 80       	ldd	r13, Y+7	; 0x07
    14c6:	ee 80       	ldd	r14, Y+6	; 0x06
    14c8:	fd 80       	ldd	r15, Y+5	; 0x05
    14ca:	0c 81       	ldd	r16, Y+4	; 0x04
    14cc:	1b 81       	ldd	r17, Y+3	; 0x03
    14ce:	aa 81       	ldd	r26, Y+2	; 0x02
    14d0:	b9 81       	ldd	r27, Y+1	; 0x01
    14d2:	ce 0f       	add	r28, r30
    14d4:	d1 1d       	adc	r29, r1
    14d6:	0f b6       	in	r0, 0x3f	; 63
    14d8:	f8 94       	cli
    14da:	de bf       	out	0x3e, r29	; 62
    14dc:	0f be       	out	0x3f, r0	; 63
    14de:	cd bf       	out	0x3d, r28	; 61
    14e0:	ed 01       	movw	r28, r26
    14e2:	08 95       	ret

000014e4 <_exit>:
    14e4:	f8 94       	cli

000014e6 <__stop_program>:
    14e6:	ff cf       	rjmp	.-2      	; 0x14e6 <__stop_program>
